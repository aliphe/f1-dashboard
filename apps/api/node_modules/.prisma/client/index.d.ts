import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.11.0
 * Query Engine version: 58369335532e47bdcec77a2f1e7c1fb83a463918
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'


/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Drivers
 * const drivers = await prisma.driver.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Drivers
   * const drivers = await prisma.driver.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']
  /**
   * @deprecated renamed to `$transaction`
   */
  transaction: PromiseConstructor['all']

  /**
   * `prisma.driver`: Exposes CRUD operations for the **Driver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drivers
    * const drivers = await prisma.driver.findMany()
    * ```
    */
  get driver(): DriverDelegate;

  /**
   * `prisma.constructor`: Exposes CRUD operations for the **Constructor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Constructors
    * const constructors = await prisma.constructor.findMany()
    * ```
    */
  get constructor(): ConstructorDelegate;

  /**
   * `prisma.driverStanding`: Exposes CRUD operations for the **DriverStanding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DriverStandings
    * const driverStandings = await prisma.driverStanding.findMany()
    * ```
    */
  get driverStanding(): DriverStandingDelegate;

  /**
   * `prisma.constructorStanding`: Exposes CRUD operations for the **ConstructorStanding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConstructorStandings
    * const constructorStandings = await prisma.constructorStanding.findMany()
    * ```
    */
  get constructorStanding(): ConstructorStandingDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ModelName: {
  Driver: 'Driver',
  Constructor: 'Constructor',
  DriverStanding: 'DriverStanding',
  ConstructorStanding: 'ConstructorStanding'
};

export declare type ModelName = (typeof ModelName)[keyof typeof ModelName]


export declare const DriverDistinctFieldEnum: {
  id: 'id',
  code: 'code',
  givenName: 'givenName',
  familyName: 'familyName',
  permanentNumber: 'permanentNumber',
  dateOfBirth: 'dateOfBirth',
  url: 'url',
  nationality: 'nationality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type DriverDistinctFieldEnum = (typeof DriverDistinctFieldEnum)[keyof typeof DriverDistinctFieldEnum]


export declare const ConstructorDistinctFieldEnum: {
  id: 'id',
  season: 'season',
  name: 'name',
  nationality: 'nationality',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type ConstructorDistinctFieldEnum = (typeof ConstructorDistinctFieldEnum)[keyof typeof ConstructorDistinctFieldEnum]


export declare const DriverStandingDistinctFieldEnum: {
  position: 'position',
  season: 'season',
  points: 'points',
  wins: 'wins',
  driverId: 'driverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type DriverStandingDistinctFieldEnum = (typeof DriverStandingDistinctFieldEnum)[keyof typeof DriverStandingDistinctFieldEnum]


export declare const ConstructorStandingDistinctFieldEnum: {
  position: 'position',
  points: 'points',
  wins: 'wins',
  constructorId: 'constructorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type ConstructorStandingDistinctFieldEnum = (typeof ConstructorStandingDistinctFieldEnum)[keyof typeof ConstructorStandingDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model Driver
 */

export type Driver = {
  id: string
  code: string
  givenName: string
  familyName: string
  permanentNumber: number
  dateOfBirth: Date
  url: string
  nationality: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateDriver = {
  count: number
  avg: DriverAvgAggregateOutputType | null
  sum: DriverSumAggregateOutputType | null
  min: DriverMinAggregateOutputType | null
  max: DriverMaxAggregateOutputType | null
}

export type DriverAvgAggregateOutputType = {
  permanentNumber: number
}

export type DriverSumAggregateOutputType = {
  permanentNumber: number
}

export type DriverMinAggregateOutputType = {
  permanentNumber: number
}

export type DriverMaxAggregateOutputType = {
  permanentNumber: number
}


export type DriverAvgAggregateInputType = {
  permanentNumber?: true
}

export type DriverSumAggregateInputType = {
  permanentNumber?: true
}

export type DriverMinAggregateInputType = {
  permanentNumber?: true
}

export type DriverMaxAggregateInputType = {
  permanentNumber?: true
}

export type AggregateDriverArgs = {
  where?: DriverWhereInput
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  cursor?: DriverWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
  count?: true
  avg?: DriverAvgAggregateInputType
  sum?: DriverSumAggregateInputType
  min?: DriverMinAggregateInputType
  max?: DriverMaxAggregateInputType
}

export type GetDriverAggregateType<T extends AggregateDriverArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDriverAggregateScalarType<T[P]>
}

export type GetDriverAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DriverAvgAggregateOutputType ? DriverAvgAggregateOutputType[P] : never
}
    
    

export type DriverSelect = {
  id?: boolean
  code?: boolean
  givenName?: boolean
  familyName?: boolean
  permanentNumber?: boolean
  dateOfBirth?: boolean
  url?: boolean
  nationality?: boolean
  DriverStanding?: boolean | FindManyDriverStandingArgs
  createdAt?: boolean
  updatedAt?: boolean
}

export type DriverInclude = {
  DriverStanding?: boolean | FindManyDriverStandingArgs
}

export type DriverGetPayload<
  S extends boolean | null | undefined | DriverArgs,
  U = keyof S
> = S extends true
  ? Driver
  : S extends undefined
  ? never
  : S extends DriverArgs | FindManyDriverArgs
  ? 'include' extends U
    ? Driver  & {
      [P in TrueKeys<S['include']>]:
      P extends 'DriverStanding'
      ? Array<DriverStandingGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Driver ? Driver[P]
: 
      P extends 'DriverStanding'
      ? Array<DriverStandingGetPayload<S['select'][P]>> : never
    }
  : Driver
: Driver


export interface DriverDelegate {
  /**
   * Find zero or one Driver that matches the filter.
   * @param {FindOneDriverArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDriverArgs>(
    args: Subset<T, FindOneDriverArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>
  /**
   * Find the first Driver that matches the filter.
   * @param {FindFirstDriverArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDriverArgs>(
    args?: Subset<T, FindFirstDriverArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>
  /**
   * Find zero or more Drivers that matches the filter.
   * @param {FindManyDriverArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Drivers
   * const drivers = await prisma.driver.findMany()
   * 
   * // Get first 10 Drivers
   * const drivers = await prisma.driver.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const driverWithIdOnly = await prisma.driver.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyDriverArgs>(
    args?: Subset<T, FindManyDriverArgs>
  ): CheckSelect<T, Promise<Array<Driver>>, Promise<Array<DriverGetPayload<T>>>>
  /**
   * Create a Driver.
   * @param {DriverCreateArgs} args - Arguments to create a Driver.
   * @example
   * // Create one Driver
   * const Driver = await prisma.driver.create({
   *   data: {
   *     // ... data to create a Driver
   *   }
   * })
   * 
  **/
  create<T extends DriverCreateArgs>(
    args: Subset<T, DriverCreateArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Delete a Driver.
   * @param {DriverDeleteArgs} args - Arguments to delete one Driver.
   * @example
   * // Delete one Driver
   * const Driver = await prisma.driver.delete({
   *   where: {
   *     // ... filter to delete one Driver
   *   }
   * })
   * 
  **/
  delete<T extends DriverDeleteArgs>(
    args: Subset<T, DriverDeleteArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Update one Driver.
   * @param {DriverUpdateArgs} args - Arguments to update one Driver.
   * @example
   * // Update one Driver
   * const driver = await prisma.driver.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DriverUpdateArgs>(
    args: Subset<T, DriverUpdateArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Delete zero or more Drivers.
   * @param {DriverDeleteManyArgs} args - Arguments to filter Drivers to delete.
   * @example
   * // Delete a few Drivers
   * const { count } = await prisma.driver.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DriverDeleteManyArgs>(
    args: Subset<T, DriverDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Drivers.
   * @param {DriverUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Drivers
   * const driver = await prisma.driver.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DriverUpdateManyArgs>(
    args: Subset<T, DriverUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Driver.
   * @param {DriverUpsertArgs} args - Arguments to update or create a Driver.
   * @example
   * // Update or create a Driver
   * const driver = await prisma.driver.upsert({
   *   create: {
   *     // ... data to create a Driver
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Driver we want to update
   *   }
   * })
  **/
  upsert<T extends DriverUpsertArgs>(
    args: Subset<T, DriverUpsertArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDriverArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDriverArgs>(args: Subset<T, AggregateDriverArgs>): Promise<GetDriverAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Driver.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DriverClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  DriverStanding<T extends FindManyDriverStandingArgs = {}>(args?: Subset<T, FindManyDriverStandingArgs>): CheckSelect<T, Promise<Array<DriverStanding>>, Promise<Array<DriverStandingGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Driver findOne
 */
export type FindOneDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Driver to fetch.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver findFirst
 */
export type FindFirstDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Driver to fetch.
  **/
  where?: DriverWhereInput
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  cursor?: DriverWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
}


/**
 * Driver findMany
 */
export type FindManyDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Drivers to fetch.
  **/
  where?: DriverWhereInput
  /**
   * Determine the order of the Drivers to fetch.
  **/
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  /**
   * Sets the position for listing Drivers.
  **/
  cursor?: DriverWhereUniqueInput
  /**
   * The number of Drivers to fetch. If negative number, it will take Drivers before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Drivers.
  **/
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
}


/**
 * Driver create
 */
export type DriverCreateArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The data needed to create a Driver.
  **/
  data: DriverCreateInput
}


/**
 * Driver update
 */
export type DriverUpdateArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The data needed to update a Driver.
  **/
  data: DriverUpdateInput
  /**
   * Choose, which Driver to update.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver updateMany
 */
export type DriverUpdateManyArgs = {
  data: DriverUpdateManyMutationInput
  where?: DriverWhereInput
}


/**
 * Driver upsert
 */
export type DriverUpsertArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The filter to search for the Driver to update in case it exists.
  **/
  where: DriverWhereUniqueInput
  /**
   * In case the Driver found by the `where` argument doesn't exist, create a new Driver with this data.
  **/
  create: DriverCreateInput
  /**
   * In case the Driver was found with the provided `where` argument, update it with this data.
  **/
  update: DriverUpdateInput
}


/**
 * Driver delete
 */
export type DriverDeleteArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter which Driver to delete.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver deleteMany
 */
export type DriverDeleteManyArgs = {
  where?: DriverWhereInput
}


/**
 * Driver without action
 */
export type DriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
}



/**
 * Model Constructor
 */

export type Constructor = {
  id: string
  season: number
  name: string
  nationality: string
  url: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateConstructor = {
  count: number
  avg: ConstructorAvgAggregateOutputType | null
  sum: ConstructorSumAggregateOutputType | null
  min: ConstructorMinAggregateOutputType | null
  max: ConstructorMaxAggregateOutputType | null
}

export type ConstructorAvgAggregateOutputType = {
  season: number
}

export type ConstructorSumAggregateOutputType = {
  season: number
}

export type ConstructorMinAggregateOutputType = {
  season: number
}

export type ConstructorMaxAggregateOutputType = {
  season: number
}


export type ConstructorAvgAggregateInputType = {
  season?: true
}

export type ConstructorSumAggregateInputType = {
  season?: true
}

export type ConstructorMinAggregateInputType = {
  season?: true
}

export type ConstructorMaxAggregateInputType = {
  season?: true
}

export type AggregateConstructorArgs = {
  where?: ConstructorWhereInput
  orderBy?: XOR<Enumerable<ConstructorOrderByInput>, ConstructorOrderByInput>
  cursor?: ConstructorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ConstructorDistinctFieldEnum>
  count?: true
  avg?: ConstructorAvgAggregateInputType
  sum?: ConstructorSumAggregateInputType
  min?: ConstructorMinAggregateInputType
  max?: ConstructorMaxAggregateInputType
}

export type GetConstructorAggregateType<T extends AggregateConstructorArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetConstructorAggregateScalarType<T[P]>
}

export type GetConstructorAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ConstructorAvgAggregateOutputType ? ConstructorAvgAggregateOutputType[P] : never
}
    
    

export type ConstructorSelect = {
  id?: boolean
  season?: boolean
  name?: boolean
  nationality?: boolean
  url?: boolean
  ConstructorStanding?: boolean | FindManyConstructorStandingArgs
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConstructorInclude = {
  ConstructorStanding?: boolean | FindManyConstructorStandingArgs
}

export type ConstructorGetPayload<
  S extends boolean | null | undefined | ConstructorArgs,
  U = keyof S
> = S extends true
  ? Constructor
  : S extends undefined
  ? never
  : S extends ConstructorArgs | FindManyConstructorArgs
  ? 'include' extends U
    ? Constructor  & {
      [P in TrueKeys<S['include']>]:
      P extends 'ConstructorStanding'
      ? Array<ConstructorStandingGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Constructor ? Constructor[P]
: 
      P extends 'ConstructorStanding'
      ? Array<ConstructorStandingGetPayload<S['select'][P]>> : never
    }
  : Constructor
: Constructor


export interface ConstructorDelegate {
  /**
   * Find zero or one Constructor that matches the filter.
   * @param {FindOneConstructorArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneConstructorArgs>(
    args: Subset<T, FindOneConstructorArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor | null>, Prisma__ConstructorClient<ConstructorGetPayload<T> | null>>
  /**
   * Find the first Constructor that matches the filter.
   * @param {FindFirstConstructorArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstConstructorArgs>(
    args?: Subset<T, FindFirstConstructorArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor | null>, Prisma__ConstructorClient<ConstructorGetPayload<T> | null>>
  /**
   * Find zero or more Constructors that matches the filter.
   * @param {FindManyConstructorArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Constructors
   * const constructors = await prisma.constructor.findMany()
   * 
   * // Get first 10 Constructors
   * const constructors = await prisma.constructor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const constructorWithIdOnly = await prisma.constructor.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyConstructorArgs>(
    args?: Subset<T, FindManyConstructorArgs>
  ): CheckSelect<T, Promise<Array<Constructor>>, Promise<Array<ConstructorGetPayload<T>>>>
  /**
   * Create a Constructor.
   * @param {ConstructorCreateArgs} args - Arguments to create a Constructor.
   * @example
   * // Create one Constructor
   * const Constructor = await prisma.constructor.create({
   *   data: {
   *     // ... data to create a Constructor
   *   }
   * })
   * 
  **/
  create<T extends ConstructorCreateArgs>(
    args: Subset<T, ConstructorCreateArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor>, Prisma__ConstructorClient<ConstructorGetPayload<T>>>
  /**
   * Delete a Constructor.
   * @param {ConstructorDeleteArgs} args - Arguments to delete one Constructor.
   * @example
   * // Delete one Constructor
   * const Constructor = await prisma.constructor.delete({
   *   where: {
   *     // ... filter to delete one Constructor
   *   }
   * })
   * 
  **/
  delete<T extends ConstructorDeleteArgs>(
    args: Subset<T, ConstructorDeleteArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor>, Prisma__ConstructorClient<ConstructorGetPayload<T>>>
  /**
   * Update one Constructor.
   * @param {ConstructorUpdateArgs} args - Arguments to update one Constructor.
   * @example
   * // Update one Constructor
   * const constructor = await prisma.constructor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ConstructorUpdateArgs>(
    args: Subset<T, ConstructorUpdateArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor>, Prisma__ConstructorClient<ConstructorGetPayload<T>>>
  /**
   * Delete zero or more Constructors.
   * @param {ConstructorDeleteManyArgs} args - Arguments to filter Constructors to delete.
   * @example
   * // Delete a few Constructors
   * const { count } = await prisma.constructor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ConstructorDeleteManyArgs>(
    args: Subset<T, ConstructorDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Constructors.
   * @param {ConstructorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Constructors
   * const constructor = await prisma.constructor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ConstructorUpdateManyArgs>(
    args: Subset<T, ConstructorUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Constructor.
   * @param {ConstructorUpsertArgs} args - Arguments to update or create a Constructor.
   * @example
   * // Update or create a Constructor
   * const constructor = await prisma.constructor.upsert({
   *   create: {
   *     // ... data to create a Constructor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Constructor we want to update
   *   }
   * })
  **/
  upsert<T extends ConstructorUpsertArgs>(
    args: Subset<T, ConstructorUpsertArgs>
  ): CheckSelect<T, Prisma__ConstructorClient<Constructor>, Prisma__ConstructorClient<ConstructorGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyConstructorArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateConstructorArgs>(args: Subset<T, AggregateConstructorArgs>): Promise<GetConstructorAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Constructor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ConstructorClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  ConstructorStanding<T extends FindManyConstructorStandingArgs = {}>(args?: Subset<T, FindManyConstructorStandingArgs>): CheckSelect<T, Promise<Array<ConstructorStanding>>, Promise<Array<ConstructorStandingGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Constructor findOne
 */
export type FindOneConstructorArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * Filter, which Constructor to fetch.
  **/
  where: ConstructorWhereUniqueInput
}


/**
 * Constructor findFirst
 */
export type FindFirstConstructorArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * Filter, which Constructor to fetch.
  **/
  where?: ConstructorWhereInput
  orderBy?: XOR<Enumerable<ConstructorOrderByInput>, ConstructorOrderByInput>
  cursor?: ConstructorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ConstructorDistinctFieldEnum>
}


/**
 * Constructor findMany
 */
export type FindManyConstructorArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * Filter, which Constructors to fetch.
  **/
  where?: ConstructorWhereInput
  /**
   * Determine the order of the Constructors to fetch.
  **/
  orderBy?: XOR<Enumerable<ConstructorOrderByInput>, ConstructorOrderByInput>
  /**
   * Sets the position for listing Constructors.
  **/
  cursor?: ConstructorWhereUniqueInput
  /**
   * The number of Constructors to fetch. If negative number, it will take Constructors before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Constructors.
  **/
  skip?: number
  distinct?: Enumerable<ConstructorDistinctFieldEnum>
}


/**
 * Constructor create
 */
export type ConstructorCreateArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * The data needed to create a Constructor.
  **/
  data: ConstructorCreateInput
}


/**
 * Constructor update
 */
export type ConstructorUpdateArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * The data needed to update a Constructor.
  **/
  data: ConstructorUpdateInput
  /**
   * Choose, which Constructor to update.
  **/
  where: ConstructorWhereUniqueInput
}


/**
 * Constructor updateMany
 */
export type ConstructorUpdateManyArgs = {
  data: ConstructorUpdateManyMutationInput
  where?: ConstructorWhereInput
}


/**
 * Constructor upsert
 */
export type ConstructorUpsertArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * The filter to search for the Constructor to update in case it exists.
  **/
  where: ConstructorWhereUniqueInput
  /**
   * In case the Constructor found by the `where` argument doesn't exist, create a new Constructor with this data.
  **/
  create: ConstructorCreateInput
  /**
   * In case the Constructor was found with the provided `where` argument, update it with this data.
  **/
  update: ConstructorUpdateInput
}


/**
 * Constructor delete
 */
export type ConstructorDeleteArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
  /**
   * Filter which Constructor to delete.
  **/
  where: ConstructorWhereUniqueInput
}


/**
 * Constructor deleteMany
 */
export type ConstructorDeleteManyArgs = {
  where?: ConstructorWhereInput
}


/**
 * Constructor without action
 */
export type ConstructorArgs = {
  /**
   * Select specific fields to fetch from the Constructor
  **/
  select?: XOR<ConstructorSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorInclude, null>
}



/**
 * Model DriverStanding
 */

export type DriverStanding = {
  position: number
  season: number
  points: number
  wins: number
  driverId: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateDriverStanding = {
  count: number
  avg: DriverStandingAvgAggregateOutputType | null
  sum: DriverStandingSumAggregateOutputType | null
  min: DriverStandingMinAggregateOutputType | null
  max: DriverStandingMaxAggregateOutputType | null
}

export type DriverStandingAvgAggregateOutputType = {
  position: number
  season: number
  points: number
  wins: number
}

export type DriverStandingSumAggregateOutputType = {
  position: number
  season: number
  points: number
  wins: number
}

export type DriverStandingMinAggregateOutputType = {
  position: number
  season: number
  points: number
  wins: number
}

export type DriverStandingMaxAggregateOutputType = {
  position: number
  season: number
  points: number
  wins: number
}


export type DriverStandingAvgAggregateInputType = {
  position?: true
  season?: true
  points?: true
  wins?: true
}

export type DriverStandingSumAggregateInputType = {
  position?: true
  season?: true
  points?: true
  wins?: true
}

export type DriverStandingMinAggregateInputType = {
  position?: true
  season?: true
  points?: true
  wins?: true
}

export type DriverStandingMaxAggregateInputType = {
  position?: true
  season?: true
  points?: true
  wins?: true
}

export type AggregateDriverStandingArgs = {
  where?: DriverStandingWhereInput
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  cursor?: DriverStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
  count?: true
  avg?: DriverStandingAvgAggregateInputType
  sum?: DriverStandingSumAggregateInputType
  min?: DriverStandingMinAggregateInputType
  max?: DriverStandingMaxAggregateInputType
}

export type GetDriverStandingAggregateType<T extends AggregateDriverStandingArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDriverStandingAggregateScalarType<T[P]>
}

export type GetDriverStandingAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DriverStandingAvgAggregateOutputType ? DriverStandingAvgAggregateOutputType[P] : never
}
    
    

export type DriverStandingSelect = {
  position?: boolean
  season?: boolean
  points?: boolean
  wins?: boolean
  Driver?: boolean | DriverArgs
  driverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DriverStandingInclude = {
  Driver?: boolean | DriverArgs
}

export type DriverStandingGetPayload<
  S extends boolean | null | undefined | DriverStandingArgs,
  U = keyof S
> = S extends true
  ? DriverStanding
  : S extends undefined
  ? never
  : S extends DriverStandingArgs | FindManyDriverStandingArgs
  ? 'include' extends U
    ? DriverStanding  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Driver'
      ? DriverGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof DriverStanding ? DriverStanding[P]
: 
      P extends 'Driver'
      ? DriverGetPayload<S['select'][P]> : never
    }
  : DriverStanding
: DriverStanding


export interface DriverStandingDelegate {
  /**
   * Find zero or one DriverStanding that matches the filter.
   * @param {FindOneDriverStandingArgs} args - Arguments to find a DriverStanding
   * @example
   * // Get one DriverStanding
   * const driverStanding = await prisma.driverStanding.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDriverStandingArgs>(
    args: Subset<T, FindOneDriverStandingArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding | null>, Prisma__DriverStandingClient<DriverStandingGetPayload<T> | null>>
  /**
   * Find the first DriverStanding that matches the filter.
   * @param {FindFirstDriverStandingArgs} args - Arguments to find a DriverStanding
   * @example
   * // Get one DriverStanding
   * const driverStanding = await prisma.driverStanding.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDriverStandingArgs>(
    args?: Subset<T, FindFirstDriverStandingArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding | null>, Prisma__DriverStandingClient<DriverStandingGetPayload<T> | null>>
  /**
   * Find zero or more DriverStandings that matches the filter.
   * @param {FindManyDriverStandingArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DriverStandings
   * const driverStandings = await prisma.driverStanding.findMany()
   * 
   * // Get first 10 DriverStandings
   * const driverStandings = await prisma.driverStanding.findMany({ take: 10 })
   * 
   * // Only select the `position`
   * const driverStandingWithPositionOnly = await prisma.driverStanding.findMany({ select: { position: true } })
   * 
  **/
  findMany<T extends FindManyDriverStandingArgs>(
    args?: Subset<T, FindManyDriverStandingArgs>
  ): CheckSelect<T, Promise<Array<DriverStanding>>, Promise<Array<DriverStandingGetPayload<T>>>>
  /**
   * Create a DriverStanding.
   * @param {DriverStandingCreateArgs} args - Arguments to create a DriverStanding.
   * @example
   * // Create one DriverStanding
   * const DriverStanding = await prisma.driverStanding.create({
   *   data: {
   *     // ... data to create a DriverStanding
   *   }
   * })
   * 
  **/
  create<T extends DriverStandingCreateArgs>(
    args: Subset<T, DriverStandingCreateArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Delete a DriverStanding.
   * @param {DriverStandingDeleteArgs} args - Arguments to delete one DriverStanding.
   * @example
   * // Delete one DriverStanding
   * const DriverStanding = await prisma.driverStanding.delete({
   *   where: {
   *     // ... filter to delete one DriverStanding
   *   }
   * })
   * 
  **/
  delete<T extends DriverStandingDeleteArgs>(
    args: Subset<T, DriverStandingDeleteArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Update one DriverStanding.
   * @param {DriverStandingUpdateArgs} args - Arguments to update one DriverStanding.
   * @example
   * // Update one DriverStanding
   * const driverStanding = await prisma.driverStanding.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DriverStandingUpdateArgs>(
    args: Subset<T, DriverStandingUpdateArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Delete zero or more DriverStandings.
   * @param {DriverStandingDeleteManyArgs} args - Arguments to filter DriverStandings to delete.
   * @example
   * // Delete a few DriverStandings
   * const { count } = await prisma.driverStanding.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DriverStandingDeleteManyArgs>(
    args: Subset<T, DriverStandingDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more DriverStandings.
   * @param {DriverStandingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DriverStandings
   * const driverStanding = await prisma.driverStanding.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DriverStandingUpdateManyArgs>(
    args: Subset<T, DriverStandingUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one DriverStanding.
   * @param {DriverStandingUpsertArgs} args - Arguments to update or create a DriverStanding.
   * @example
   * // Update or create a DriverStanding
   * const driverStanding = await prisma.driverStanding.upsert({
   *   create: {
   *     // ... data to create a DriverStanding
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DriverStanding we want to update
   *   }
   * })
  **/
  upsert<T extends DriverStandingUpsertArgs>(
    args: Subset<T, DriverStandingUpsertArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDriverStandingArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDriverStandingArgs>(args: Subset<T, AggregateDriverStandingArgs>): Promise<GetDriverStandingAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for DriverStanding.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DriverStandingClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Driver<T extends DriverArgs = {}>(args?: Subset<T, DriverArgs>): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * DriverStanding findOne
 */
export type FindOneDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStanding to fetch.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding findFirst
 */
export type FindFirstDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStanding to fetch.
  **/
  where?: DriverStandingWhereInput
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  cursor?: DriverStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
}


/**
 * DriverStanding findMany
 */
export type FindManyDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStandings to fetch.
  **/
  where?: DriverStandingWhereInput
  /**
   * Determine the order of the DriverStandings to fetch.
  **/
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  /**
   * Sets the position for listing DriverStandings.
  **/
  cursor?: DriverStandingWhereUniqueInput
  /**
   * The number of DriverStandings to fetch. If negative number, it will take DriverStandings before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` DriverStandings.
  **/
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
}


/**
 * DriverStanding create
 */
export type DriverStandingCreateArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The data needed to create a DriverStanding.
  **/
  data: DriverStandingCreateInput
}


/**
 * DriverStanding update
 */
export type DriverStandingUpdateArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The data needed to update a DriverStanding.
  **/
  data: DriverStandingUpdateInput
  /**
   * Choose, which DriverStanding to update.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding updateMany
 */
export type DriverStandingUpdateManyArgs = {
  data: DriverStandingUpdateManyMutationInput
  where?: DriverStandingWhereInput
}


/**
 * DriverStanding upsert
 */
export type DriverStandingUpsertArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The filter to search for the DriverStanding to update in case it exists.
  **/
  where: DriverStandingWhereUniqueInput
  /**
   * In case the DriverStanding found by the `where` argument doesn't exist, create a new DriverStanding with this data.
  **/
  create: DriverStandingCreateInput
  /**
   * In case the DriverStanding was found with the provided `where` argument, update it with this data.
  **/
  update: DriverStandingUpdateInput
}


/**
 * DriverStanding delete
 */
export type DriverStandingDeleteArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter which DriverStanding to delete.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding deleteMany
 */
export type DriverStandingDeleteManyArgs = {
  where?: DriverStandingWhereInput
}


/**
 * DriverStanding without action
 */
export type DriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
}



/**
 * Model ConstructorStanding
 */

export type ConstructorStanding = {
  position: number
  points: number
  wins: number
  constructorId: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateConstructorStanding = {
  count: number
  avg: ConstructorStandingAvgAggregateOutputType | null
  sum: ConstructorStandingSumAggregateOutputType | null
  min: ConstructorStandingMinAggregateOutputType | null
  max: ConstructorStandingMaxAggregateOutputType | null
}

export type ConstructorStandingAvgAggregateOutputType = {
  position: number
  points: number
  wins: number
}

export type ConstructorStandingSumAggregateOutputType = {
  position: number
  points: number
  wins: number
}

export type ConstructorStandingMinAggregateOutputType = {
  position: number
  points: number
  wins: number
}

export type ConstructorStandingMaxAggregateOutputType = {
  position: number
  points: number
  wins: number
}


export type ConstructorStandingAvgAggregateInputType = {
  position?: true
  points?: true
  wins?: true
}

export type ConstructorStandingSumAggregateInputType = {
  position?: true
  points?: true
  wins?: true
}

export type ConstructorStandingMinAggregateInputType = {
  position?: true
  points?: true
  wins?: true
}

export type ConstructorStandingMaxAggregateInputType = {
  position?: true
  points?: true
  wins?: true
}

export type AggregateConstructorStandingArgs = {
  where?: ConstructorStandingWhereInput
  orderBy?: XOR<Enumerable<ConstructorStandingOrderByInput>, ConstructorStandingOrderByInput>
  cursor?: ConstructorStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ConstructorStandingDistinctFieldEnum>
  count?: true
  avg?: ConstructorStandingAvgAggregateInputType
  sum?: ConstructorStandingSumAggregateInputType
  min?: ConstructorStandingMinAggregateInputType
  max?: ConstructorStandingMaxAggregateInputType
}

export type GetConstructorStandingAggregateType<T extends AggregateConstructorStandingArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetConstructorStandingAggregateScalarType<T[P]>
}

export type GetConstructorStandingAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ConstructorStandingAvgAggregateOutputType ? ConstructorStandingAvgAggregateOutputType[P] : never
}
    
    

export type ConstructorStandingSelect = {
  position?: boolean
  points?: boolean
  wins?: boolean
  Constructor?: boolean | ConstructorArgs
  constructorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConstructorStandingInclude = {
  Constructor?: boolean | ConstructorArgs
}

export type ConstructorStandingGetPayload<
  S extends boolean | null | undefined | ConstructorStandingArgs,
  U = keyof S
> = S extends true
  ? ConstructorStanding
  : S extends undefined
  ? never
  : S extends ConstructorStandingArgs | FindManyConstructorStandingArgs
  ? 'include' extends U
    ? ConstructorStanding  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Constructor'
      ? ConstructorGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof ConstructorStanding ? ConstructorStanding[P]
: 
      P extends 'Constructor'
      ? ConstructorGetPayload<S['select'][P]> : never
    }
  : ConstructorStanding
: ConstructorStanding


export interface ConstructorStandingDelegate {
  /**
   * Find zero or one ConstructorStanding that matches the filter.
   * @param {FindOneConstructorStandingArgs} args - Arguments to find a ConstructorStanding
   * @example
   * // Get one ConstructorStanding
   * const constructorStanding = await prisma.constructorStanding.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneConstructorStandingArgs>(
    args: Subset<T, FindOneConstructorStandingArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding | null>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T> | null>>
  /**
   * Find the first ConstructorStanding that matches the filter.
   * @param {FindFirstConstructorStandingArgs} args - Arguments to find a ConstructorStanding
   * @example
   * // Get one ConstructorStanding
   * const constructorStanding = await prisma.constructorStanding.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstConstructorStandingArgs>(
    args?: Subset<T, FindFirstConstructorStandingArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding | null>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T> | null>>
  /**
   * Find zero or more ConstructorStandings that matches the filter.
   * @param {FindManyConstructorStandingArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConstructorStandings
   * const constructorStandings = await prisma.constructorStanding.findMany()
   * 
   * // Get first 10 ConstructorStandings
   * const constructorStandings = await prisma.constructorStanding.findMany({ take: 10 })
   * 
   * // Only select the `position`
   * const constructorStandingWithPositionOnly = await prisma.constructorStanding.findMany({ select: { position: true } })
   * 
  **/
  findMany<T extends FindManyConstructorStandingArgs>(
    args?: Subset<T, FindManyConstructorStandingArgs>
  ): CheckSelect<T, Promise<Array<ConstructorStanding>>, Promise<Array<ConstructorStandingGetPayload<T>>>>
  /**
   * Create a ConstructorStanding.
   * @param {ConstructorStandingCreateArgs} args - Arguments to create a ConstructorStanding.
   * @example
   * // Create one ConstructorStanding
   * const ConstructorStanding = await prisma.constructorStanding.create({
   *   data: {
   *     // ... data to create a ConstructorStanding
   *   }
   * })
   * 
  **/
  create<T extends ConstructorStandingCreateArgs>(
    args: Subset<T, ConstructorStandingCreateArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T>>>
  /**
   * Delete a ConstructorStanding.
   * @param {ConstructorStandingDeleteArgs} args - Arguments to delete one ConstructorStanding.
   * @example
   * // Delete one ConstructorStanding
   * const ConstructorStanding = await prisma.constructorStanding.delete({
   *   where: {
   *     // ... filter to delete one ConstructorStanding
   *   }
   * })
   * 
  **/
  delete<T extends ConstructorStandingDeleteArgs>(
    args: Subset<T, ConstructorStandingDeleteArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T>>>
  /**
   * Update one ConstructorStanding.
   * @param {ConstructorStandingUpdateArgs} args - Arguments to update one ConstructorStanding.
   * @example
   * // Update one ConstructorStanding
   * const constructorStanding = await prisma.constructorStanding.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ConstructorStandingUpdateArgs>(
    args: Subset<T, ConstructorStandingUpdateArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T>>>
  /**
   * Delete zero or more ConstructorStandings.
   * @param {ConstructorStandingDeleteManyArgs} args - Arguments to filter ConstructorStandings to delete.
   * @example
   * // Delete a few ConstructorStandings
   * const { count } = await prisma.constructorStanding.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ConstructorStandingDeleteManyArgs>(
    args: Subset<T, ConstructorStandingDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more ConstructorStandings.
   * @param {ConstructorStandingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConstructorStandings
   * const constructorStanding = await prisma.constructorStanding.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ConstructorStandingUpdateManyArgs>(
    args: Subset<T, ConstructorStandingUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one ConstructorStanding.
   * @param {ConstructorStandingUpsertArgs} args - Arguments to update or create a ConstructorStanding.
   * @example
   * // Update or create a ConstructorStanding
   * const constructorStanding = await prisma.constructorStanding.upsert({
   *   create: {
   *     // ... data to create a ConstructorStanding
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConstructorStanding we want to update
   *   }
   * })
  **/
  upsert<T extends ConstructorStandingUpsertArgs>(
    args: Subset<T, ConstructorStandingUpsertArgs>
  ): CheckSelect<T, Prisma__ConstructorStandingClient<ConstructorStanding>, Prisma__ConstructorStandingClient<ConstructorStandingGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyConstructorStandingArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateConstructorStandingArgs>(args: Subset<T, AggregateConstructorStandingArgs>): Promise<GetConstructorStandingAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for ConstructorStanding.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ConstructorStandingClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Constructor<T extends ConstructorArgs = {}>(args?: Subset<T, ConstructorArgs>): CheckSelect<T, Prisma__ConstructorClient<Constructor | null>, Prisma__ConstructorClient<ConstructorGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * ConstructorStanding findOne
 */
export type FindOneConstructorStandingArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * Filter, which ConstructorStanding to fetch.
  **/
  where: ConstructorStandingWhereUniqueInput
}


/**
 * ConstructorStanding findFirst
 */
export type FindFirstConstructorStandingArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * Filter, which ConstructorStanding to fetch.
  **/
  where?: ConstructorStandingWhereInput
  orderBy?: XOR<Enumerable<ConstructorStandingOrderByInput>, ConstructorStandingOrderByInput>
  cursor?: ConstructorStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ConstructorStandingDistinctFieldEnum>
}


/**
 * ConstructorStanding findMany
 */
export type FindManyConstructorStandingArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * Filter, which ConstructorStandings to fetch.
  **/
  where?: ConstructorStandingWhereInput
  /**
   * Determine the order of the ConstructorStandings to fetch.
  **/
  orderBy?: XOR<Enumerable<ConstructorStandingOrderByInput>, ConstructorStandingOrderByInput>
  /**
   * Sets the position for listing ConstructorStandings.
  **/
  cursor?: ConstructorStandingWhereUniqueInput
  /**
   * The number of ConstructorStandings to fetch. If negative number, it will take ConstructorStandings before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` ConstructorStandings.
  **/
  skip?: number
  distinct?: Enumerable<ConstructorStandingDistinctFieldEnum>
}


/**
 * ConstructorStanding create
 */
export type ConstructorStandingCreateArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * The data needed to create a ConstructorStanding.
  **/
  data: ConstructorStandingCreateInput
}


/**
 * ConstructorStanding update
 */
export type ConstructorStandingUpdateArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * The data needed to update a ConstructorStanding.
  **/
  data: ConstructorStandingUpdateInput
  /**
   * Choose, which ConstructorStanding to update.
  **/
  where: ConstructorStandingWhereUniqueInput
}


/**
 * ConstructorStanding updateMany
 */
export type ConstructorStandingUpdateManyArgs = {
  data: ConstructorStandingUpdateManyMutationInput
  where?: ConstructorStandingWhereInput
}


/**
 * ConstructorStanding upsert
 */
export type ConstructorStandingUpsertArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * The filter to search for the ConstructorStanding to update in case it exists.
  **/
  where: ConstructorStandingWhereUniqueInput
  /**
   * In case the ConstructorStanding found by the `where` argument doesn't exist, create a new ConstructorStanding with this data.
  **/
  create: ConstructorStandingCreateInput
  /**
   * In case the ConstructorStanding was found with the provided `where` argument, update it with this data.
  **/
  update: ConstructorStandingUpdateInput
}


/**
 * ConstructorStanding delete
 */
export type ConstructorStandingDeleteArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
  /**
   * Filter which ConstructorStanding to delete.
  **/
  where: ConstructorStandingWhereUniqueInput
}


/**
 * ConstructorStanding deleteMany
 */
export type ConstructorStandingDeleteManyArgs = {
  where?: ConstructorStandingWhereInput
}


/**
 * ConstructorStanding without action
 */
export type ConstructorStandingArgs = {
  /**
   * Select specific fields to fetch from the ConstructorStanding
  **/
  select?: XOR<ConstructorStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ConstructorStandingInclude, null>
}



/**
 * Deep Input Types
 */


export type DriverWhereInput = {
  AND?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  OR?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  NOT?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  id?: XOR<StringFilter, string>
  code?: XOR<StringFilter, string>
  givenName?: XOR<StringFilter, string>
  familyName?: XOR<StringFilter, string>
  permanentNumber?: XOR<IntFilter, number>
  dateOfBirth?: XOR<DateTimeFilter, Date | string>
  url?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  DriverStanding?: DriverStandingListRelationFilter
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverOrderByInput = {
  id?: SortOrder
  code?: SortOrder
  givenName?: SortOrder
  familyName?: SortOrder
  permanentNumber?: SortOrder
  dateOfBirth?: SortOrder
  url?: SortOrder
  nationality?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type DriverWhereUniqueInput = {
  id?: string
}

export type ConstructorWhereInput = {
  AND?: XOR<ConstructorWhereInput, Enumerable<ConstructorWhereInput>>
  OR?: XOR<ConstructorWhereInput, Enumerable<ConstructorWhereInput>>
  NOT?: XOR<ConstructorWhereInput, Enumerable<ConstructorWhereInput>>
  id?: XOR<StringFilter, string>
  season?: XOR<IntFilter, number>
  name?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  url?: XOR<StringFilter, string>
  ConstructorStanding?: ConstructorStandingListRelationFilter
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type ConstructorOrderByInput = {
  id?: SortOrder
  season?: SortOrder
  name?: SortOrder
  nationality?: SortOrder
  url?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type ConstructorWhereUniqueInput = {
  id?: string
}

export type DriverStandingWhereInput = {
  AND?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  OR?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  NOT?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  position?: XOR<IntFilter, number>
  season?: XOR<IntFilter, number>
  points?: XOR<IntFilter, number>
  wins?: XOR<IntFilter, number>
  Driver?: XOR<DriverRelationFilter, DriverWhereInput>
  driverId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverStandingOrderByInput = {
  position?: SortOrder
  season?: SortOrder
  points?: SortOrder
  wins?: SortOrder
  driverId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type DriverStandingWhereUniqueInput = {
  position?: number
}

export type ConstructorStandingWhereInput = {
  AND?: XOR<ConstructorStandingWhereInput, Enumerable<ConstructorStandingWhereInput>>
  OR?: XOR<ConstructorStandingWhereInput, Enumerable<ConstructorStandingWhereInput>>
  NOT?: XOR<ConstructorStandingWhereInput, Enumerable<ConstructorStandingWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<IntFilter, number>
  wins?: XOR<IntFilter, number>
  Constructor?: XOR<ConstructorRelationFilter, ConstructorWhereInput>
  constructorId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type ConstructorStandingOrderByInput = {
  position?: SortOrder
  points?: SortOrder
  wins?: SortOrder
  constructorId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type ConstructorStandingWhereUniqueInput = {
  position?: number
}

export type DriverCreateInput = {
  id: string
  code: string
  givenName: string
  familyName: string
  permanentNumber: number
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  DriverStanding?: DriverStandingCreateManyWithoutDriverInput
}

export type DriverUpdateInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: XOR<number, IntFieldUpdateOperationsInput>
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  DriverStanding?: DriverStandingUpdateManyWithoutDriverInput
}

export type DriverUpdateManyMutationInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: XOR<number, IntFieldUpdateOperationsInput>
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type ConstructorCreateInput = {
  id: string
  season: number
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  ConstructorStanding?: ConstructorStandingCreateManyWithoutConstructorInput
}

export type ConstructorUpdateInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  ConstructorStanding?: ConstructorStandingUpdateManyWithoutConstructorInput
}

export type ConstructorUpdateManyMutationInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DriverStandingCreateInput = {
  position: number
  season: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  Driver: DriverCreateOneWithoutDriverStandingInput
}

export type DriverStandingUpdateInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  Driver?: DriverUpdateOneRequiredWithoutDriverStandingInput
}

export type DriverStandingUpdateManyMutationInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type ConstructorStandingCreateInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  Constructor: ConstructorCreateOneWithoutConstructorStandingInput
}

export type ConstructorStandingUpdateInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  Constructor?: ConstructorUpdateOneRequiredWithoutConstructorStandingInput
}

export type ConstructorStandingUpdateManyMutationInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: XOR<string, NestedStringFilter>
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type DriverStandingListRelationFilter = {
  every?: DriverStandingWhereInput
  some?: DriverStandingWhereInput
  none?: DriverStandingWhereInput
}

export type ConstructorStandingListRelationFilter = {
  every?: ConstructorStandingWhereInput
  some?: ConstructorStandingWhereInput
  none?: ConstructorStandingWhereInput
}

export type DriverRelationFilter = {
  is?: DriverWhereInput
  isNot?: DriverWhereInput
}

export type ConstructorRelationFilter = {
  is?: ConstructorWhereInput
  isNot?: ConstructorWhereInput
}

export type DriverStandingCreateManyWithoutDriverInput = {
  create?: XOR<DriverStandingCreateWithoutDriverInput, Enumerable<DriverStandingCreateWithoutDriverInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutDriverInput, Enumerable<DriverStandingCreateOrConnectWithoutDriverInput>>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type DriverStandingUpdateManyWithoutDriverInput = {
  create?: XOR<DriverStandingCreateWithoutDriverInput, Enumerable<DriverStandingCreateWithoutDriverInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  set?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  disconnect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  delete?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  update?: XOR<DriverStandingUpdateWithWhereUniqueWithoutDriverInput, Enumerable<DriverStandingUpdateWithWhereUniqueWithoutDriverInput>>
  updateMany?: XOR<DriverStandingUpdateManyWithWhereWithoutDriverInput, Enumerable<DriverStandingUpdateManyWithWhereWithoutDriverInput>>
  deleteMany?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  upsert?: XOR<DriverStandingUpsertWithWhereUniqueWithoutDriverInput, Enumerable<DriverStandingUpsertWithWhereUniqueWithoutDriverInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutDriverInput, Enumerable<DriverStandingCreateOrConnectWithoutDriverInput>>
}

export type ConstructorStandingCreateManyWithoutConstructorInput = {
  create?: XOR<ConstructorStandingCreateWithoutConstructorInput, Enumerable<ConstructorStandingCreateWithoutConstructorInput>>
  connect?: XOR<ConstructorStandingWhereUniqueInput, Enumerable<ConstructorStandingWhereUniqueInput>>
  connectOrCreate?: XOR<ConstructorStandingCreateOrConnectWithoutConstructorInput, Enumerable<ConstructorStandingCreateOrConnectWithoutConstructorInput>>
}

export type ConstructorStandingUpdateManyWithoutConstructorInput = {
  create?: XOR<ConstructorStandingCreateWithoutConstructorInput, Enumerable<ConstructorStandingCreateWithoutConstructorInput>>
  connect?: XOR<ConstructorStandingWhereUniqueInput, Enumerable<ConstructorStandingWhereUniqueInput>>
  set?: XOR<ConstructorStandingWhereUniqueInput, Enumerable<ConstructorStandingWhereUniqueInput>>
  disconnect?: XOR<ConstructorStandingWhereUniqueInput, Enumerable<ConstructorStandingWhereUniqueInput>>
  delete?: XOR<ConstructorStandingWhereUniqueInput, Enumerable<ConstructorStandingWhereUniqueInput>>
  update?: XOR<ConstructorStandingUpdateWithWhereUniqueWithoutConstructorInput, Enumerable<ConstructorStandingUpdateWithWhereUniqueWithoutConstructorInput>>
  updateMany?: XOR<ConstructorStandingUpdateManyWithWhereWithoutConstructorInput, Enumerable<ConstructorStandingUpdateManyWithWhereWithoutConstructorInput>>
  deleteMany?: XOR<ConstructorStandingScalarWhereInput, Enumerable<ConstructorStandingScalarWhereInput>>
  upsert?: XOR<ConstructorStandingUpsertWithWhereUniqueWithoutConstructorInput, Enumerable<ConstructorStandingUpsertWithWhereUniqueWithoutConstructorInput>>
  connectOrCreate?: XOR<ConstructorStandingCreateOrConnectWithoutConstructorInput, Enumerable<ConstructorStandingCreateOrConnectWithoutConstructorInput>>
}

export type DriverCreateOneWithoutDriverStandingInput = {
  create?: DriverCreateWithoutDriverStandingInput
  connect?: DriverWhereUniqueInput
  connectOrCreate?: DriverCreateOrConnectWithoutDriverStandingInput
}

export type DriverUpdateOneRequiredWithoutDriverStandingInput = {
  create?: DriverCreateWithoutDriverStandingInput
  connect?: DriverWhereUniqueInput
  update?: DriverUpdateWithoutDriverStandingInput
  upsert?: DriverUpsertWithoutDriverStandingInput
  connectOrCreate?: DriverCreateOrConnectWithoutDriverStandingInput
}

export type ConstructorCreateOneWithoutConstructorStandingInput = {
  create?: ConstructorCreateWithoutConstructorStandingInput
  connect?: ConstructorWhereUniqueInput
  connectOrCreate?: ConstructorCreateOrConnectWithoutConstructorStandingInput
}

export type ConstructorUpdateOneRequiredWithoutConstructorStandingInput = {
  create?: ConstructorCreateWithoutConstructorStandingInput
  connect?: ConstructorWhereUniqueInput
  update?: ConstructorUpdateWithoutConstructorStandingInput
  upsert?: ConstructorUpsertWithoutConstructorStandingInput
  connectOrCreate?: ConstructorCreateOrConnectWithoutConstructorStandingInput
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type DriverStandingCreateWithoutDriverInput = {
  position: number
  season: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DriverStandingCreateOrConnectWithoutDriverInput = {
  where: DriverStandingWhereUniqueInput
  create: DriverStandingCreateWithoutDriverInput
}

export type DriverStandingUpdateWithWhereUniqueWithoutDriverInput = {
  where: DriverStandingWhereUniqueInput
  data: DriverStandingUpdateWithoutDriverInput
}

export type DriverStandingUpdateManyWithWhereWithoutDriverInput = {
  where: DriverStandingScalarWhereInput
  data: DriverStandingUpdateManyMutationInput
}

export type DriverStandingScalarWhereInput = {
  AND?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  OR?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  NOT?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  position?: XOR<IntFilter, number>
  season?: XOR<IntFilter, number>
  points?: XOR<IntFilter, number>
  wins?: XOR<IntFilter, number>
  driverId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverStandingUpsertWithWhereUniqueWithoutDriverInput = {
  where: DriverStandingWhereUniqueInput
  update: DriverStandingUpdateWithoutDriverInput
  create: DriverStandingCreateWithoutDriverInput
}

export type ConstructorStandingCreateWithoutConstructorInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConstructorStandingCreateOrConnectWithoutConstructorInput = {
  where: ConstructorStandingWhereUniqueInput
  create: ConstructorStandingCreateWithoutConstructorInput
}

export type ConstructorStandingUpdateWithWhereUniqueWithoutConstructorInput = {
  where: ConstructorStandingWhereUniqueInput
  data: ConstructorStandingUpdateWithoutConstructorInput
}

export type ConstructorStandingUpdateManyWithWhereWithoutConstructorInput = {
  where: ConstructorStandingScalarWhereInput
  data: ConstructorStandingUpdateManyMutationInput
}

export type ConstructorStandingScalarWhereInput = {
  AND?: XOR<ConstructorStandingScalarWhereInput, Enumerable<ConstructorStandingScalarWhereInput>>
  OR?: XOR<ConstructorStandingScalarWhereInput, Enumerable<ConstructorStandingScalarWhereInput>>
  NOT?: XOR<ConstructorStandingScalarWhereInput, Enumerable<ConstructorStandingScalarWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<IntFilter, number>
  wins?: XOR<IntFilter, number>
  constructorId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type ConstructorStandingUpsertWithWhereUniqueWithoutConstructorInput = {
  where: ConstructorStandingWhereUniqueInput
  update: ConstructorStandingUpdateWithoutConstructorInput
  create: ConstructorStandingCreateWithoutConstructorInput
}

export type DriverCreateWithoutDriverStandingInput = {
  id: string
  code: string
  givenName: string
  familyName: string
  permanentNumber: number
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DriverCreateOrConnectWithoutDriverStandingInput = {
  where: DriverWhereUniqueInput
  create: DriverCreateWithoutDriverStandingInput
}

export type DriverUpdateWithoutDriverStandingInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: XOR<number, IntFieldUpdateOperationsInput>
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DriverUpsertWithoutDriverStandingInput = {
  update: DriverUpdateWithoutDriverStandingInput
  create: DriverCreateWithoutDriverStandingInput
}

export type ConstructorCreateWithoutConstructorStandingInput = {
  id: string
  season: number
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConstructorCreateOrConnectWithoutConstructorStandingInput = {
  where: ConstructorWhereUniqueInput
  create: ConstructorCreateWithoutConstructorStandingInput
}

export type ConstructorUpdateWithoutConstructorStandingInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type ConstructorUpsertWithoutConstructorStandingInput = {
  update: ConstructorUpdateWithoutConstructorStandingInput
  create: ConstructorCreateWithoutConstructorStandingInput
}

export type DriverStandingUpdateWithoutDriverInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  season?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type ConstructorStandingUpdateWithoutConstructorInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, IntFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
