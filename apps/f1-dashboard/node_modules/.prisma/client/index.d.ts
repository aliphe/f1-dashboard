import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.11.0
 * Query Engine version: 58369335532e47bdcec77a2f1e7c1fb83a463918
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'


/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Drivers
 * const drivers = await prisma.driver.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Drivers
   * const drivers = await prisma.driver.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']
  /**
   * @deprecated renamed to `$transaction`
   */
  transaction: PromiseConstructor['all']

  /**
   * `prisma.driver`: Exposes CRUD operations for the **Driver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drivers
    * const drivers = await prisma.driver.findMany()
    * ```
    */
  get driver(): DriverDelegate;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): TeamDelegate;

  /**
   * `prisma.circuit`: Exposes CRUD operations for the **Circuit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Circuits
    * const circuits = await prisma.circuit.findMany()
    * ```
    */
  get circuit(): CircuitDelegate;

  /**
   * `prisma.race`: Exposes CRUD operations for the **Race** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Races
    * const races = await prisma.race.findMany()
    * ```
    */
  get race(): RaceDelegate;

  /**
   * `prisma.raceResult`: Exposes CRUD operations for the **RaceResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RaceResults
    * const raceResults = await prisma.raceResult.findMany()
    * ```
    */
  get raceResult(): RaceResultDelegate;

  /**
   * `prisma.driverStanding`: Exposes CRUD operations for the **DriverStanding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DriverStandings
    * const driverStandings = await prisma.driverStanding.findMany()
    * ```
    */
  get driverStanding(): DriverStandingDelegate;

  /**
   * `prisma.teamStanding`: Exposes CRUD operations for the **TeamStanding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamStandings
    * const teamStandings = await prisma.teamStanding.findMany()
    * ```
    */
  get teamStanding(): TeamStandingDelegate;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): SeasonDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ModelName: {
  Driver: 'Driver',
  Team: 'Team',
  Circuit: 'Circuit',
  Race: 'Race',
  RaceResult: 'RaceResult',
  DriverStanding: 'DriverStanding',
  TeamStanding: 'TeamStanding',
  Season: 'Season'
};

export declare type ModelName = (typeof ModelName)[keyof typeof ModelName]


export declare const DriverDistinctFieldEnum: {
  id: 'id',
  code: 'code',
  givenName: 'givenName',
  familyName: 'familyName',
  permanentNumber: 'permanentNumber',
  dateOfBirth: 'dateOfBirth',
  url: 'url',
  nationality: 'nationality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type DriverDistinctFieldEnum = (typeof DriverDistinctFieldEnum)[keyof typeof DriverDistinctFieldEnum]


export declare const TeamDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  nationality: 'nationality',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type TeamDistinctFieldEnum = (typeof TeamDistinctFieldEnum)[keyof typeof TeamDistinctFieldEnum]


export declare const CircuitDistinctFieldEnum: {
  id: 'id',
  url: 'url',
  name: 'name',
  city: 'city',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type CircuitDistinctFieldEnum = (typeof CircuitDistinctFieldEnum)[keyof typeof CircuitDistinctFieldEnum]


export declare const RaceDistinctFieldEnum: {
  round: 'round',
  name: 'name',
  seasonYear: 'seasonYear',
  circuitId: 'circuitId',
  date: 'date',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type RaceDistinctFieldEnum = (typeof RaceDistinctFieldEnum)[keyof typeof RaceDistinctFieldEnum]


export declare const RaceResultDistinctFieldEnum: {
  points: 'points',
  position: 'position',
  grid: 'grid',
  laps: 'laps',
  time: 'time',
  status: 'status',
  driverId: 'driverId',
  teamId: 'teamId',
  raceRound: 'raceRound',
  raceSeasonYear: 'raceSeasonYear',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type RaceResultDistinctFieldEnum = (typeof RaceResultDistinctFieldEnum)[keyof typeof RaceResultDistinctFieldEnum]


export declare const DriverStandingDistinctFieldEnum: {
  position: 'position',
  points: 'points',
  wins: 'wins',
  seasonYear: 'seasonYear',
  driverId: 'driverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type DriverStandingDistinctFieldEnum = (typeof DriverStandingDistinctFieldEnum)[keyof typeof DriverStandingDistinctFieldEnum]


export declare const TeamStandingDistinctFieldEnum: {
  position: 'position',
  points: 'points',
  wins: 'wins',
  seasonYear: 'seasonYear',
  teamId: 'teamId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type TeamStandingDistinctFieldEnum = (typeof TeamStandingDistinctFieldEnum)[keyof typeof TeamStandingDistinctFieldEnum]


export declare const SeasonDistinctFieldEnum: {
  year: 'year'
};

export declare type SeasonDistinctFieldEnum = (typeof SeasonDistinctFieldEnum)[keyof typeof SeasonDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model Driver
 */

export type Driver = {
  id: string
  code: string | null
  givenName: string
  familyName: string
  permanentNumber: number | null
  dateOfBirth: Date
  url: string
  nationality: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateDriver = {
  count: number
  avg: DriverAvgAggregateOutputType | null
  sum: DriverSumAggregateOutputType | null
  min: DriverMinAggregateOutputType | null
  max: DriverMaxAggregateOutputType | null
}

export type DriverAvgAggregateOutputType = {
  permanentNumber: number | null
}

export type DriverSumAggregateOutputType = {
  permanentNumber: number | null
}

export type DriverMinAggregateOutputType = {
  permanentNumber: number | null
}

export type DriverMaxAggregateOutputType = {
  permanentNumber: number | null
}


export type DriverAvgAggregateInputType = {
  permanentNumber?: true
}

export type DriverSumAggregateInputType = {
  permanentNumber?: true
}

export type DriverMinAggregateInputType = {
  permanentNumber?: true
}

export type DriverMaxAggregateInputType = {
  permanentNumber?: true
}

export type AggregateDriverArgs = {
  where?: DriverWhereInput
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  cursor?: DriverWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
  count?: true
  avg?: DriverAvgAggregateInputType
  sum?: DriverSumAggregateInputType
  min?: DriverMinAggregateInputType
  max?: DriverMaxAggregateInputType
}

export type GetDriverAggregateType<T extends AggregateDriverArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDriverAggregateScalarType<T[P]>
}

export type GetDriverAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DriverAvgAggregateOutputType ? DriverAvgAggregateOutputType[P] : never
}
    
    

export type DriverSelect = {
  id?: boolean
  code?: boolean
  givenName?: boolean
  familyName?: boolean
  permanentNumber?: boolean
  dateOfBirth?: boolean
  url?: boolean
  nationality?: boolean
  seasons?: boolean | FindManySeasonArgs
  createdAt?: boolean
  updatedAt?: boolean
  DriverStanding?: boolean | FindManyDriverStandingArgs
  RaceResult?: boolean | FindManyRaceResultArgs
}

export type DriverInclude = {
  seasons?: boolean | FindManySeasonArgs
  DriverStanding?: boolean | FindManyDriverStandingArgs
  RaceResult?: boolean | FindManyRaceResultArgs
}

export type DriverGetPayload<
  S extends boolean | null | undefined | DriverArgs,
  U = keyof S
> = S extends true
  ? Driver
  : S extends undefined
  ? never
  : S extends DriverArgs | FindManyDriverArgs
  ? 'include' extends U
    ? Driver  & {
      [P in TrueKeys<S['include']>]:
      P extends 'seasons'
      ? Array<SeasonGetPayload<S['include'][P]>> :
      P extends 'DriverStanding'
      ? Array<DriverStandingGetPayload<S['include'][P]>> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Driver ? Driver[P]
: 
      P extends 'seasons'
      ? Array<SeasonGetPayload<S['select'][P]>> :
      P extends 'DriverStanding'
      ? Array<DriverStandingGetPayload<S['select'][P]>> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['select'][P]>> : never
    }
  : Driver
: Driver


export interface DriverDelegate {
  /**
   * Find zero or one Driver that matches the filter.
   * @param {FindOneDriverArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDriverArgs>(
    args: Subset<T, FindOneDriverArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>
  /**
   * Find the first Driver that matches the filter.
   * @param {FindFirstDriverArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDriverArgs>(
    args?: Subset<T, FindFirstDriverArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>
  /**
   * Find zero or more Drivers that matches the filter.
   * @param {FindManyDriverArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Drivers
   * const drivers = await prisma.driver.findMany()
   * 
   * // Get first 10 Drivers
   * const drivers = await prisma.driver.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const driverWithIdOnly = await prisma.driver.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyDriverArgs>(
    args?: Subset<T, FindManyDriverArgs>
  ): CheckSelect<T, Promise<Array<Driver>>, Promise<Array<DriverGetPayload<T>>>>
  /**
   * Create a Driver.
   * @param {DriverCreateArgs} args - Arguments to create a Driver.
   * @example
   * // Create one Driver
   * const Driver = await prisma.driver.create({
   *   data: {
   *     // ... data to create a Driver
   *   }
   * })
   * 
  **/
  create<T extends DriverCreateArgs>(
    args: Subset<T, DriverCreateArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Delete a Driver.
   * @param {DriverDeleteArgs} args - Arguments to delete one Driver.
   * @example
   * // Delete one Driver
   * const Driver = await prisma.driver.delete({
   *   where: {
   *     // ... filter to delete one Driver
   *   }
   * })
   * 
  **/
  delete<T extends DriverDeleteArgs>(
    args: Subset<T, DriverDeleteArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Update one Driver.
   * @param {DriverUpdateArgs} args - Arguments to update one Driver.
   * @example
   * // Update one Driver
   * const driver = await prisma.driver.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DriverUpdateArgs>(
    args: Subset<T, DriverUpdateArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Delete zero or more Drivers.
   * @param {DriverDeleteManyArgs} args - Arguments to filter Drivers to delete.
   * @example
   * // Delete a few Drivers
   * const { count } = await prisma.driver.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DriverDeleteManyArgs>(
    args: Subset<T, DriverDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Drivers.
   * @param {DriverUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Drivers
   * const driver = await prisma.driver.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DriverUpdateManyArgs>(
    args: Subset<T, DriverUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Driver.
   * @param {DriverUpsertArgs} args - Arguments to update or create a Driver.
   * @example
   * // Update or create a Driver
   * const driver = await prisma.driver.upsert({
   *   create: {
   *     // ... data to create a Driver
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Driver we want to update
   *   }
   * })
  **/
  upsert<T extends DriverUpsertArgs>(
    args: Subset<T, DriverUpsertArgs>
  ): CheckSelect<T, Prisma__DriverClient<Driver>, Prisma__DriverClient<DriverGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDriverArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDriverArgs>(args: Subset<T, AggregateDriverArgs>): Promise<GetDriverAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Driver.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DriverClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  seasons<T extends FindManySeasonArgs = {}>(args?: Subset<T, FindManySeasonArgs>): CheckSelect<T, Promise<Array<Season>>, Promise<Array<SeasonGetPayload<T>>>>;

  DriverStanding<T extends FindManyDriverStandingArgs = {}>(args?: Subset<T, FindManyDriverStandingArgs>): CheckSelect<T, Promise<Array<DriverStanding>>, Promise<Array<DriverStandingGetPayload<T>>>>;

  RaceResult<T extends FindManyRaceResultArgs = {}>(args?: Subset<T, FindManyRaceResultArgs>): CheckSelect<T, Promise<Array<RaceResult>>, Promise<Array<RaceResultGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Driver findOne
 */
export type FindOneDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Driver to fetch.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver findFirst
 */
export type FindFirstDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Driver to fetch.
  **/
  where?: DriverWhereInput
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  cursor?: DriverWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
}


/**
 * Driver findMany
 */
export type FindManyDriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter, which Drivers to fetch.
  **/
  where?: DriverWhereInput
  /**
   * Determine the order of the Drivers to fetch.
  **/
  orderBy?: XOR<Enumerable<DriverOrderByInput>, DriverOrderByInput>
  /**
   * Sets the position for listing Drivers.
  **/
  cursor?: DriverWhereUniqueInput
  /**
   * The number of Drivers to fetch. If negative number, it will take Drivers before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Drivers.
  **/
  skip?: number
  distinct?: Enumerable<DriverDistinctFieldEnum>
}


/**
 * Driver create
 */
export type DriverCreateArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The data needed to create a Driver.
  **/
  data: DriverCreateInput
}


/**
 * Driver update
 */
export type DriverUpdateArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The data needed to update a Driver.
  **/
  data: DriverUpdateInput
  /**
   * Choose, which Driver to update.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver updateMany
 */
export type DriverUpdateManyArgs = {
  data: DriverUpdateManyMutationInput
  where?: DriverWhereInput
}


/**
 * Driver upsert
 */
export type DriverUpsertArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * The filter to search for the Driver to update in case it exists.
  **/
  where: DriverWhereUniqueInput
  /**
   * In case the Driver found by the `where` argument doesn't exist, create a new Driver with this data.
  **/
  create: DriverCreateInput
  /**
   * In case the Driver was found with the provided `where` argument, update it with this data.
  **/
  update: DriverUpdateInput
}


/**
 * Driver delete
 */
export type DriverDeleteArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
  /**
   * Filter which Driver to delete.
  **/
  where: DriverWhereUniqueInput
}


/**
 * Driver deleteMany
 */
export type DriverDeleteManyArgs = {
  where?: DriverWhereInput
}


/**
 * Driver without action
 */
export type DriverArgs = {
  /**
   * Select specific fields to fetch from the Driver
  **/
  select?: XOR<DriverSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverInclude, null>
}



/**
 * Model Team
 */

export type Team = {
  id: string
  name: string
  nationality: string
  url: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateTeam = {
  count: number
}



export type AggregateTeamArgs = {
  where?: TeamWhereInput
  orderBy?: XOR<Enumerable<TeamOrderByInput>, TeamOrderByInput>
  cursor?: TeamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TeamDistinctFieldEnum>
  count?: true
}

export type GetTeamAggregateType<T extends AggregateTeamArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type TeamSelect = {
  id?: boolean
  name?: boolean
  nationality?: boolean
  url?: boolean
  seasons?: boolean | FindManySeasonArgs
  TeamStanding?: boolean | FindManyTeamStandingArgs
  createdAt?: boolean
  updatedAt?: boolean
  RaceResult?: boolean | FindManyRaceResultArgs
}

export type TeamInclude = {
  seasons?: boolean | FindManySeasonArgs
  TeamStanding?: boolean | FindManyTeamStandingArgs
  RaceResult?: boolean | FindManyRaceResultArgs
}

export type TeamGetPayload<
  S extends boolean | null | undefined | TeamArgs,
  U = keyof S
> = S extends true
  ? Team
  : S extends undefined
  ? never
  : S extends TeamArgs | FindManyTeamArgs
  ? 'include' extends U
    ? Team  & {
      [P in TrueKeys<S['include']>]:
      P extends 'seasons'
      ? Array<SeasonGetPayload<S['include'][P]>> :
      P extends 'TeamStanding'
      ? Array<TeamStandingGetPayload<S['include'][P]>> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Team ? Team[P]
: 
      P extends 'seasons'
      ? Array<SeasonGetPayload<S['select'][P]>> :
      P extends 'TeamStanding'
      ? Array<TeamStandingGetPayload<S['select'][P]>> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['select'][P]>> : never
    }
  : Team
: Team


export interface TeamDelegate {
  /**
   * Find zero or one Team that matches the filter.
   * @param {FindOneTeamArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTeamArgs>(
    args: Subset<T, FindOneTeamArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team | null>, Prisma__TeamClient<TeamGetPayload<T> | null>>
  /**
   * Find the first Team that matches the filter.
   * @param {FindFirstTeamArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTeamArgs>(
    args?: Subset<T, FindFirstTeamArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team | null>, Prisma__TeamClient<TeamGetPayload<T> | null>>
  /**
   * Find zero or more Teams that matches the filter.
   * @param {FindManyTeamArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Teams
   * const teams = await prisma.team.findMany()
   * 
   * // Get first 10 Teams
   * const teams = await prisma.team.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyTeamArgs>(
    args?: Subset<T, FindManyTeamArgs>
  ): CheckSelect<T, Promise<Array<Team>>, Promise<Array<TeamGetPayload<T>>>>
  /**
   * Create a Team.
   * @param {TeamCreateArgs} args - Arguments to create a Team.
   * @example
   * // Create one Team
   * const Team = await prisma.team.create({
   *   data: {
   *     // ... data to create a Team
   *   }
   * })
   * 
  **/
  create<T extends TeamCreateArgs>(
    args: Subset<T, TeamCreateArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>
  /**
   * Delete a Team.
   * @param {TeamDeleteArgs} args - Arguments to delete one Team.
   * @example
   * // Delete one Team
   * const Team = await prisma.team.delete({
   *   where: {
   *     // ... filter to delete one Team
   *   }
   * })
   * 
  **/
  delete<T extends TeamDeleteArgs>(
    args: Subset<T, TeamDeleteArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>
  /**
   * Update one Team.
   * @param {TeamUpdateArgs} args - Arguments to update one Team.
   * @example
   * // Update one Team
   * const team = await prisma.team.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TeamUpdateArgs>(
    args: Subset<T, TeamUpdateArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>
  /**
   * Delete zero or more Teams.
   * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
   * @example
   * // Delete a few Teams
   * const { count } = await prisma.team.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TeamDeleteManyArgs>(
    args: Subset<T, TeamDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Teams.
   * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Teams
   * const team = await prisma.team.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TeamUpdateManyArgs>(
    args: Subset<T, TeamUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Team.
   * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
   * @example
   * // Update or create a Team
   * const team = await prisma.team.upsert({
   *   create: {
   *     // ... data to create a Team
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Team we want to update
   *   }
   * })
  **/
  upsert<T extends TeamUpsertArgs>(
    args: Subset<T, TeamUpsertArgs>
  ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTeamArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTeamArgs>(args: Subset<T, AggregateTeamArgs>): Promise<GetTeamAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Team.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TeamClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  seasons<T extends FindManySeasonArgs = {}>(args?: Subset<T, FindManySeasonArgs>): CheckSelect<T, Promise<Array<Season>>, Promise<Array<SeasonGetPayload<T>>>>;

  TeamStanding<T extends FindManyTeamStandingArgs = {}>(args?: Subset<T, FindManyTeamStandingArgs>): CheckSelect<T, Promise<Array<TeamStanding>>, Promise<Array<TeamStandingGetPayload<T>>>>;

  RaceResult<T extends FindManyRaceResultArgs = {}>(args?: Subset<T, FindManyRaceResultArgs>): CheckSelect<T, Promise<Array<RaceResult>>, Promise<Array<RaceResultGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Team findOne
 */
export type FindOneTeamArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * Filter, which Team to fetch.
  **/
  where: TeamWhereUniqueInput
}


/**
 * Team findFirst
 */
export type FindFirstTeamArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * Filter, which Team to fetch.
  **/
  where?: TeamWhereInput
  orderBy?: XOR<Enumerable<TeamOrderByInput>, TeamOrderByInput>
  cursor?: TeamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TeamDistinctFieldEnum>
}


/**
 * Team findMany
 */
export type FindManyTeamArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * Filter, which Teams to fetch.
  **/
  where?: TeamWhereInput
  /**
   * Determine the order of the Teams to fetch.
  **/
  orderBy?: XOR<Enumerable<TeamOrderByInput>, TeamOrderByInput>
  /**
   * Sets the position for listing Teams.
  **/
  cursor?: TeamWhereUniqueInput
  /**
   * The number of Teams to fetch. If negative number, it will take Teams before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Teams.
  **/
  skip?: number
  distinct?: Enumerable<TeamDistinctFieldEnum>
}


/**
 * Team create
 */
export type TeamCreateArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * The data needed to create a Team.
  **/
  data: TeamCreateInput
}


/**
 * Team update
 */
export type TeamUpdateArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * The data needed to update a Team.
  **/
  data: TeamUpdateInput
  /**
   * Choose, which Team to update.
  **/
  where: TeamWhereUniqueInput
}


/**
 * Team updateMany
 */
export type TeamUpdateManyArgs = {
  data: TeamUpdateManyMutationInput
  where?: TeamWhereInput
}


/**
 * Team upsert
 */
export type TeamUpsertArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * The filter to search for the Team to update in case it exists.
  **/
  where: TeamWhereUniqueInput
  /**
   * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
  **/
  create: TeamCreateInput
  /**
   * In case the Team was found with the provided `where` argument, update it with this data.
  **/
  update: TeamUpdateInput
}


/**
 * Team delete
 */
export type TeamDeleteArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
  /**
   * Filter which Team to delete.
  **/
  where: TeamWhereUniqueInput
}


/**
 * Team deleteMany
 */
export type TeamDeleteManyArgs = {
  where?: TeamWhereInput
}


/**
 * Team without action
 */
export type TeamArgs = {
  /**
   * Select specific fields to fetch from the Team
  **/
  select?: XOR<TeamSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamInclude, null>
}



/**
 * Model Circuit
 */

export type Circuit = {
  id: string
  url: string
  name: string
  city: string
  country: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateCircuit = {
  count: number
}



export type AggregateCircuitArgs = {
  where?: CircuitWhereInput
  orderBy?: XOR<Enumerable<CircuitOrderByInput>, CircuitOrderByInput>
  cursor?: CircuitWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CircuitDistinctFieldEnum>
  count?: true
}

export type GetCircuitAggregateType<T extends AggregateCircuitArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type CircuitSelect = {
  id?: boolean
  url?: boolean
  name?: boolean
  city?: boolean
  country?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Race?: boolean | FindManyRaceArgs
}

export type CircuitInclude = {
  Race?: boolean | FindManyRaceArgs
}

export type CircuitGetPayload<
  S extends boolean | null | undefined | CircuitArgs,
  U = keyof S
> = S extends true
  ? Circuit
  : S extends undefined
  ? never
  : S extends CircuitArgs | FindManyCircuitArgs
  ? 'include' extends U
    ? Circuit  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Race'
      ? Array<RaceGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Circuit ? Circuit[P]
: 
      P extends 'Race'
      ? Array<RaceGetPayload<S['select'][P]>> : never
    }
  : Circuit
: Circuit


export interface CircuitDelegate {
  /**
   * Find zero or one Circuit that matches the filter.
   * @param {FindOneCircuitArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCircuitArgs>(
    args: Subset<T, FindOneCircuitArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit | null>, Prisma__CircuitClient<CircuitGetPayload<T> | null>>
  /**
   * Find the first Circuit that matches the filter.
   * @param {FindFirstCircuitArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstCircuitArgs>(
    args?: Subset<T, FindFirstCircuitArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit | null>, Prisma__CircuitClient<CircuitGetPayload<T> | null>>
  /**
   * Find zero or more Circuits that matches the filter.
   * @param {FindManyCircuitArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Circuits
   * const circuits = await prisma.circuit.findMany()
   * 
   * // Get first 10 Circuits
   * const circuits = await prisma.circuit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const circuitWithIdOnly = await prisma.circuit.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyCircuitArgs>(
    args?: Subset<T, FindManyCircuitArgs>
  ): CheckSelect<T, Promise<Array<Circuit>>, Promise<Array<CircuitGetPayload<T>>>>
  /**
   * Create a Circuit.
   * @param {CircuitCreateArgs} args - Arguments to create a Circuit.
   * @example
   * // Create one Circuit
   * const Circuit = await prisma.circuit.create({
   *   data: {
   *     // ... data to create a Circuit
   *   }
   * })
   * 
  **/
  create<T extends CircuitCreateArgs>(
    args: Subset<T, CircuitCreateArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit>, Prisma__CircuitClient<CircuitGetPayload<T>>>
  /**
   * Delete a Circuit.
   * @param {CircuitDeleteArgs} args - Arguments to delete one Circuit.
   * @example
   * // Delete one Circuit
   * const Circuit = await prisma.circuit.delete({
   *   where: {
   *     // ... filter to delete one Circuit
   *   }
   * })
   * 
  **/
  delete<T extends CircuitDeleteArgs>(
    args: Subset<T, CircuitDeleteArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit>, Prisma__CircuitClient<CircuitGetPayload<T>>>
  /**
   * Update one Circuit.
   * @param {CircuitUpdateArgs} args - Arguments to update one Circuit.
   * @example
   * // Update one Circuit
   * const circuit = await prisma.circuit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CircuitUpdateArgs>(
    args: Subset<T, CircuitUpdateArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit>, Prisma__CircuitClient<CircuitGetPayload<T>>>
  /**
   * Delete zero or more Circuits.
   * @param {CircuitDeleteManyArgs} args - Arguments to filter Circuits to delete.
   * @example
   * // Delete a few Circuits
   * const { count } = await prisma.circuit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CircuitDeleteManyArgs>(
    args: Subset<T, CircuitDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Circuits.
   * @param {CircuitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Circuits
   * const circuit = await prisma.circuit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CircuitUpdateManyArgs>(
    args: Subset<T, CircuitUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Circuit.
   * @param {CircuitUpsertArgs} args - Arguments to update or create a Circuit.
   * @example
   * // Update or create a Circuit
   * const circuit = await prisma.circuit.upsert({
   *   create: {
   *     // ... data to create a Circuit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Circuit we want to update
   *   }
   * })
  **/
  upsert<T extends CircuitUpsertArgs>(
    args: Subset<T, CircuitUpsertArgs>
  ): CheckSelect<T, Prisma__CircuitClient<Circuit>, Prisma__CircuitClient<CircuitGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyCircuitArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCircuitArgs>(args: Subset<T, AggregateCircuitArgs>): Promise<GetCircuitAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Circuit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__CircuitClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Race<T extends FindManyRaceArgs = {}>(args?: Subset<T, FindManyRaceArgs>): CheckSelect<T, Promise<Array<Race>>, Promise<Array<RaceGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Circuit findOne
 */
export type FindOneCircuitArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * Filter, which Circuit to fetch.
  **/
  where: CircuitWhereUniqueInput
}


/**
 * Circuit findFirst
 */
export type FindFirstCircuitArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * Filter, which Circuit to fetch.
  **/
  where?: CircuitWhereInput
  orderBy?: XOR<Enumerable<CircuitOrderByInput>, CircuitOrderByInput>
  cursor?: CircuitWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CircuitDistinctFieldEnum>
}


/**
 * Circuit findMany
 */
export type FindManyCircuitArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * Filter, which Circuits to fetch.
  **/
  where?: CircuitWhereInput
  /**
   * Determine the order of the Circuits to fetch.
  **/
  orderBy?: XOR<Enumerable<CircuitOrderByInput>, CircuitOrderByInput>
  /**
   * Sets the position for listing Circuits.
  **/
  cursor?: CircuitWhereUniqueInput
  /**
   * The number of Circuits to fetch. If negative number, it will take Circuits before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Circuits.
  **/
  skip?: number
  distinct?: Enumerable<CircuitDistinctFieldEnum>
}


/**
 * Circuit create
 */
export type CircuitCreateArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * The data needed to create a Circuit.
  **/
  data: CircuitCreateInput
}


/**
 * Circuit update
 */
export type CircuitUpdateArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * The data needed to update a Circuit.
  **/
  data: CircuitUpdateInput
  /**
   * Choose, which Circuit to update.
  **/
  where: CircuitWhereUniqueInput
}


/**
 * Circuit updateMany
 */
export type CircuitUpdateManyArgs = {
  data: CircuitUpdateManyMutationInput
  where?: CircuitWhereInput
}


/**
 * Circuit upsert
 */
export type CircuitUpsertArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * The filter to search for the Circuit to update in case it exists.
  **/
  where: CircuitWhereUniqueInput
  /**
   * In case the Circuit found by the `where` argument doesn't exist, create a new Circuit with this data.
  **/
  create: CircuitCreateInput
  /**
   * In case the Circuit was found with the provided `where` argument, update it with this data.
  **/
  update: CircuitUpdateInput
}


/**
 * Circuit delete
 */
export type CircuitDeleteArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
  /**
   * Filter which Circuit to delete.
  **/
  where: CircuitWhereUniqueInput
}


/**
 * Circuit deleteMany
 */
export type CircuitDeleteManyArgs = {
  where?: CircuitWhereInput
}


/**
 * Circuit without action
 */
export type CircuitArgs = {
  /**
   * Select specific fields to fetch from the Circuit
  **/
  select?: XOR<CircuitSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<CircuitInclude, null>
}



/**
 * Model Race
 */

export type Race = {
  round: number
  name: string
  seasonYear: number
  circuitId: string
  date: Date
  url: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateRace = {
  count: number
  avg: RaceAvgAggregateOutputType | null
  sum: RaceSumAggregateOutputType | null
  min: RaceMinAggregateOutputType | null
  max: RaceMaxAggregateOutputType | null
}

export type RaceAvgAggregateOutputType = {
  round: number
  seasonYear: number
}

export type RaceSumAggregateOutputType = {
  round: number
  seasonYear: number
}

export type RaceMinAggregateOutputType = {
  round: number
  seasonYear: number
}

export type RaceMaxAggregateOutputType = {
  round: number
  seasonYear: number
}


export type RaceAvgAggregateInputType = {
  round?: true
  seasonYear?: true
}

export type RaceSumAggregateInputType = {
  round?: true
  seasonYear?: true
}

export type RaceMinAggregateInputType = {
  round?: true
  seasonYear?: true
}

export type RaceMaxAggregateInputType = {
  round?: true
  seasonYear?: true
}

export type AggregateRaceArgs = {
  where?: RaceWhereInput
  orderBy?: XOR<Enumerable<RaceOrderByInput>, RaceOrderByInput>
  cursor?: RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RaceDistinctFieldEnum>
  count?: true
  avg?: RaceAvgAggregateInputType
  sum?: RaceSumAggregateInputType
  min?: RaceMinAggregateInputType
  max?: RaceMaxAggregateInputType
}

export type GetRaceAggregateType<T extends AggregateRaceArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetRaceAggregateScalarType<T[P]>
}

export type GetRaceAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof RaceAvgAggregateOutputType ? RaceAvgAggregateOutputType[P] : never
}
    
    

export type RaceSelect = {
  round?: boolean
  name?: boolean
  season?: boolean | SeasonArgs
  seasonYear?: boolean
  circuitId?: boolean
  circuit?: boolean | CircuitArgs
  date?: boolean
  url?: boolean
  RaceResult?: boolean | FindManyRaceResultArgs
  createdAt?: boolean
  updatedAt?: boolean
}

export type RaceInclude = {
  season?: boolean | SeasonArgs
  circuit?: boolean | CircuitArgs
  RaceResult?: boolean | FindManyRaceResultArgs
}

export type RaceGetPayload<
  S extends boolean | null | undefined | RaceArgs,
  U = keyof S
> = S extends true
  ? Race
  : S extends undefined
  ? never
  : S extends RaceArgs | FindManyRaceArgs
  ? 'include' extends U
    ? Race  & {
      [P in TrueKeys<S['include']>]:
      P extends 'season'
      ? SeasonGetPayload<S['include'][P]> :
      P extends 'circuit'
      ? CircuitGetPayload<S['include'][P]> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Race ? Race[P]
: 
      P extends 'season'
      ? SeasonGetPayload<S['select'][P]> :
      P extends 'circuit'
      ? CircuitGetPayload<S['select'][P]> :
      P extends 'RaceResult'
      ? Array<RaceResultGetPayload<S['select'][P]>> : never
    }
  : Race
: Race


export interface RaceDelegate {
  /**
   * Find zero or one Race that matches the filter.
   * @param {FindOneRaceArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRaceArgs>(
    args: Subset<T, FindOneRaceArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race | null>, Prisma__RaceClient<RaceGetPayload<T> | null>>
  /**
   * Find the first Race that matches the filter.
   * @param {FindFirstRaceArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstRaceArgs>(
    args?: Subset<T, FindFirstRaceArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race | null>, Prisma__RaceClient<RaceGetPayload<T> | null>>
  /**
   * Find zero or more Races that matches the filter.
   * @param {FindManyRaceArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Races
   * const races = await prisma.race.findMany()
   * 
   * // Get first 10 Races
   * const races = await prisma.race.findMany({ take: 10 })
   * 
   * // Only select the `round`
   * const raceWithRoundOnly = await prisma.race.findMany({ select: { round: true } })
   * 
  **/
  findMany<T extends FindManyRaceArgs>(
    args?: Subset<T, FindManyRaceArgs>
  ): CheckSelect<T, Promise<Array<Race>>, Promise<Array<RaceGetPayload<T>>>>
  /**
   * Create a Race.
   * @param {RaceCreateArgs} args - Arguments to create a Race.
   * @example
   * // Create one Race
   * const Race = await prisma.race.create({
   *   data: {
   *     // ... data to create a Race
   *   }
   * })
   * 
  **/
  create<T extends RaceCreateArgs>(
    args: Subset<T, RaceCreateArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race>, Prisma__RaceClient<RaceGetPayload<T>>>
  /**
   * Delete a Race.
   * @param {RaceDeleteArgs} args - Arguments to delete one Race.
   * @example
   * // Delete one Race
   * const Race = await prisma.race.delete({
   *   where: {
   *     // ... filter to delete one Race
   *   }
   * })
   * 
  **/
  delete<T extends RaceDeleteArgs>(
    args: Subset<T, RaceDeleteArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race>, Prisma__RaceClient<RaceGetPayload<T>>>
  /**
   * Update one Race.
   * @param {RaceUpdateArgs} args - Arguments to update one Race.
   * @example
   * // Update one Race
   * const race = await prisma.race.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RaceUpdateArgs>(
    args: Subset<T, RaceUpdateArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race>, Prisma__RaceClient<RaceGetPayload<T>>>
  /**
   * Delete zero or more Races.
   * @param {RaceDeleteManyArgs} args - Arguments to filter Races to delete.
   * @example
   * // Delete a few Races
   * const { count } = await prisma.race.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RaceDeleteManyArgs>(
    args: Subset<T, RaceDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Races.
   * @param {RaceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Races
   * const race = await prisma.race.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RaceUpdateManyArgs>(
    args: Subset<T, RaceUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Race.
   * @param {RaceUpsertArgs} args - Arguments to update or create a Race.
   * @example
   * // Update or create a Race
   * const race = await prisma.race.upsert({
   *   create: {
   *     // ... data to create a Race
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Race we want to update
   *   }
   * })
  **/
  upsert<T extends RaceUpsertArgs>(
    args: Subset<T, RaceUpsertArgs>
  ): CheckSelect<T, Prisma__RaceClient<Race>, Prisma__RaceClient<RaceGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRaceArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRaceArgs>(args: Subset<T, AggregateRaceArgs>): Promise<GetRaceAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Race.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RaceClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  season<T extends SeasonArgs = {}>(args?: Subset<T, SeasonArgs>): CheckSelect<T, Prisma__SeasonClient<Season | null>, Prisma__SeasonClient<SeasonGetPayload<T> | null>>;

  circuit<T extends CircuitArgs = {}>(args?: Subset<T, CircuitArgs>): CheckSelect<T, Prisma__CircuitClient<Circuit | null>, Prisma__CircuitClient<CircuitGetPayload<T> | null>>;

  RaceResult<T extends FindManyRaceResultArgs = {}>(args?: Subset<T, FindManyRaceResultArgs>): CheckSelect<T, Promise<Array<RaceResult>>, Promise<Array<RaceResultGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Race findOne
 */
export type FindOneRaceArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * Filter, which Race to fetch.
  **/
  where: RaceWhereUniqueInput
}


/**
 * Race findFirst
 */
export type FindFirstRaceArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * Filter, which Race to fetch.
  **/
  where?: RaceWhereInput
  orderBy?: XOR<Enumerable<RaceOrderByInput>, RaceOrderByInput>
  cursor?: RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RaceDistinctFieldEnum>
}


/**
 * Race findMany
 */
export type FindManyRaceArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * Filter, which Races to fetch.
  **/
  where?: RaceWhereInput
  /**
   * Determine the order of the Races to fetch.
  **/
  orderBy?: XOR<Enumerable<RaceOrderByInput>, RaceOrderByInput>
  /**
   * Sets the position for listing Races.
  **/
  cursor?: RaceWhereUniqueInput
  /**
   * The number of Races to fetch. If negative number, it will take Races before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Races.
  **/
  skip?: number
  distinct?: Enumerable<RaceDistinctFieldEnum>
}


/**
 * Race create
 */
export type RaceCreateArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * The data needed to create a Race.
  **/
  data: RaceCreateInput
}


/**
 * Race update
 */
export type RaceUpdateArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * The data needed to update a Race.
  **/
  data: RaceUpdateInput
  /**
   * Choose, which Race to update.
  **/
  where: RaceWhereUniqueInput
}


/**
 * Race updateMany
 */
export type RaceUpdateManyArgs = {
  data: RaceUpdateManyMutationInput
  where?: RaceWhereInput
}


/**
 * Race upsert
 */
export type RaceUpsertArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * The filter to search for the Race to update in case it exists.
  **/
  where: RaceWhereUniqueInput
  /**
   * In case the Race found by the `where` argument doesn't exist, create a new Race with this data.
  **/
  create: RaceCreateInput
  /**
   * In case the Race was found with the provided `where` argument, update it with this data.
  **/
  update: RaceUpdateInput
}


/**
 * Race delete
 */
export type RaceDeleteArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
  /**
   * Filter which Race to delete.
  **/
  where: RaceWhereUniqueInput
}


/**
 * Race deleteMany
 */
export type RaceDeleteManyArgs = {
  where?: RaceWhereInput
}


/**
 * Race without action
 */
export type RaceArgs = {
  /**
   * Select specific fields to fetch from the Race
  **/
  select?: XOR<RaceSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceInclude, null>
}



/**
 * Model RaceResult
 */

export type RaceResult = {
  points: number
  position: number
  grid: number
  laps: number
  time: string | null
  status: string
  driverId: string
  teamId: string
  raceRound: number
  raceSeasonYear: number
  createdAt: Date
  updatedAt: Date
}


export type AggregateRaceResult = {
  count: number
  avg: RaceResultAvgAggregateOutputType | null
  sum: RaceResultSumAggregateOutputType | null
  min: RaceResultMinAggregateOutputType | null
  max: RaceResultMaxAggregateOutputType | null
}

export type RaceResultAvgAggregateOutputType = {
  points: number
  position: number
  grid: number
  laps: number
  raceRound: number
  raceSeasonYear: number
}

export type RaceResultSumAggregateOutputType = {
  points: number
  position: number
  grid: number
  laps: number
  raceRound: number
  raceSeasonYear: number
}

export type RaceResultMinAggregateOutputType = {
  points: number
  position: number
  grid: number
  laps: number
  raceRound: number
  raceSeasonYear: number
}

export type RaceResultMaxAggregateOutputType = {
  points: number
  position: number
  grid: number
  laps: number
  raceRound: number
  raceSeasonYear: number
}


export type RaceResultAvgAggregateInputType = {
  points?: true
  position?: true
  grid?: true
  laps?: true
  raceRound?: true
  raceSeasonYear?: true
}

export type RaceResultSumAggregateInputType = {
  points?: true
  position?: true
  grid?: true
  laps?: true
  raceRound?: true
  raceSeasonYear?: true
}

export type RaceResultMinAggregateInputType = {
  points?: true
  position?: true
  grid?: true
  laps?: true
  raceRound?: true
  raceSeasonYear?: true
}

export type RaceResultMaxAggregateInputType = {
  points?: true
  position?: true
  grid?: true
  laps?: true
  raceRound?: true
  raceSeasonYear?: true
}

export type AggregateRaceResultArgs = {
  where?: RaceResultWhereInput
  orderBy?: XOR<Enumerable<RaceResultOrderByInput>, RaceResultOrderByInput>
  cursor?: RaceResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RaceResultDistinctFieldEnum>
  count?: true
  avg?: RaceResultAvgAggregateInputType
  sum?: RaceResultSumAggregateInputType
  min?: RaceResultMinAggregateInputType
  max?: RaceResultMaxAggregateInputType
}

export type GetRaceResultAggregateType<T extends AggregateRaceResultArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetRaceResultAggregateScalarType<T[P]>
}

export type GetRaceResultAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof RaceResultAvgAggregateOutputType ? RaceResultAvgAggregateOutputType[P] : never
}
    
    

export type RaceResultSelect = {
  points?: boolean
  position?: boolean
  grid?: boolean
  laps?: boolean
  time?: boolean
  status?: boolean
  driver?: boolean | DriverArgs
  driverId?: boolean
  team?: boolean | TeamArgs
  teamId?: boolean
  raceRound?: boolean
  raceSeasonYear?: boolean
  race?: boolean | RaceArgs
  createdAt?: boolean
  updatedAt?: boolean
}

export type RaceResultInclude = {
  driver?: boolean | DriverArgs
  team?: boolean | TeamArgs
  race?: boolean | RaceArgs
}

export type RaceResultGetPayload<
  S extends boolean | null | undefined | RaceResultArgs,
  U = keyof S
> = S extends true
  ? RaceResult
  : S extends undefined
  ? never
  : S extends RaceResultArgs | FindManyRaceResultArgs
  ? 'include' extends U
    ? RaceResult  & {
      [P in TrueKeys<S['include']>]:
      P extends 'driver'
      ? DriverGetPayload<S['include'][P]> :
      P extends 'team'
      ? TeamGetPayload<S['include'][P]> :
      P extends 'race'
      ? RaceGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof RaceResult ? RaceResult[P]
: 
      P extends 'driver'
      ? DriverGetPayload<S['select'][P]> :
      P extends 'team'
      ? TeamGetPayload<S['select'][P]> :
      P extends 'race'
      ? RaceGetPayload<S['select'][P]> : never
    }
  : RaceResult
: RaceResult


export interface RaceResultDelegate {
  /**
   * Find zero or one RaceResult that matches the filter.
   * @param {FindOneRaceResultArgs} args - Arguments to find a RaceResult
   * @example
   * // Get one RaceResult
   * const raceResult = await prisma.raceResult.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRaceResultArgs>(
    args: Subset<T, FindOneRaceResultArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult | null>, Prisma__RaceResultClient<RaceResultGetPayload<T> | null>>
  /**
   * Find the first RaceResult that matches the filter.
   * @param {FindFirstRaceResultArgs} args - Arguments to find a RaceResult
   * @example
   * // Get one RaceResult
   * const raceResult = await prisma.raceResult.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstRaceResultArgs>(
    args?: Subset<T, FindFirstRaceResultArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult | null>, Prisma__RaceResultClient<RaceResultGetPayload<T> | null>>
  /**
   * Find zero or more RaceResults that matches the filter.
   * @param {FindManyRaceResultArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RaceResults
   * const raceResults = await prisma.raceResult.findMany()
   * 
   * // Get first 10 RaceResults
   * const raceResults = await prisma.raceResult.findMany({ take: 10 })
   * 
   * // Only select the `points`
   * const raceResultWithPointsOnly = await prisma.raceResult.findMany({ select: { points: true } })
   * 
  **/
  findMany<T extends FindManyRaceResultArgs>(
    args?: Subset<T, FindManyRaceResultArgs>
  ): CheckSelect<T, Promise<Array<RaceResult>>, Promise<Array<RaceResultGetPayload<T>>>>
  /**
   * Create a RaceResult.
   * @param {RaceResultCreateArgs} args - Arguments to create a RaceResult.
   * @example
   * // Create one RaceResult
   * const RaceResult = await prisma.raceResult.create({
   *   data: {
   *     // ... data to create a RaceResult
   *   }
   * })
   * 
  **/
  create<T extends RaceResultCreateArgs>(
    args: Subset<T, RaceResultCreateArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult>, Prisma__RaceResultClient<RaceResultGetPayload<T>>>
  /**
   * Delete a RaceResult.
   * @param {RaceResultDeleteArgs} args - Arguments to delete one RaceResult.
   * @example
   * // Delete one RaceResult
   * const RaceResult = await prisma.raceResult.delete({
   *   where: {
   *     // ... filter to delete one RaceResult
   *   }
   * })
   * 
  **/
  delete<T extends RaceResultDeleteArgs>(
    args: Subset<T, RaceResultDeleteArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult>, Prisma__RaceResultClient<RaceResultGetPayload<T>>>
  /**
   * Update one RaceResult.
   * @param {RaceResultUpdateArgs} args - Arguments to update one RaceResult.
   * @example
   * // Update one RaceResult
   * const raceResult = await prisma.raceResult.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RaceResultUpdateArgs>(
    args: Subset<T, RaceResultUpdateArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult>, Prisma__RaceResultClient<RaceResultGetPayload<T>>>
  /**
   * Delete zero or more RaceResults.
   * @param {RaceResultDeleteManyArgs} args - Arguments to filter RaceResults to delete.
   * @example
   * // Delete a few RaceResults
   * const { count } = await prisma.raceResult.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RaceResultDeleteManyArgs>(
    args: Subset<T, RaceResultDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more RaceResults.
   * @param {RaceResultUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RaceResults
   * const raceResult = await prisma.raceResult.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RaceResultUpdateManyArgs>(
    args: Subset<T, RaceResultUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one RaceResult.
   * @param {RaceResultUpsertArgs} args - Arguments to update or create a RaceResult.
   * @example
   * // Update or create a RaceResult
   * const raceResult = await prisma.raceResult.upsert({
   *   create: {
   *     // ... data to create a RaceResult
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RaceResult we want to update
   *   }
   * })
  **/
  upsert<T extends RaceResultUpsertArgs>(
    args: Subset<T, RaceResultUpsertArgs>
  ): CheckSelect<T, Prisma__RaceResultClient<RaceResult>, Prisma__RaceResultClient<RaceResultGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRaceResultArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRaceResultArgs>(args: Subset<T, AggregateRaceResultArgs>): Promise<GetRaceResultAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for RaceResult.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RaceResultClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  driver<T extends DriverArgs = {}>(args?: Subset<T, DriverArgs>): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>;

  team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null>, Prisma__TeamClient<TeamGetPayload<T> | null>>;

  race<T extends RaceArgs = {}>(args?: Subset<T, RaceArgs>): CheckSelect<T, Prisma__RaceClient<Race | null>, Prisma__RaceClient<RaceGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * RaceResult findOne
 */
export type FindOneRaceResultArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * Filter, which RaceResult to fetch.
  **/
  where: RaceResultWhereUniqueInput
}


/**
 * RaceResult findFirst
 */
export type FindFirstRaceResultArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * Filter, which RaceResult to fetch.
  **/
  where?: RaceResultWhereInput
  orderBy?: XOR<Enumerable<RaceResultOrderByInput>, RaceResultOrderByInput>
  cursor?: RaceResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RaceResultDistinctFieldEnum>
}


/**
 * RaceResult findMany
 */
export type FindManyRaceResultArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * Filter, which RaceResults to fetch.
  **/
  where?: RaceResultWhereInput
  /**
   * Determine the order of the RaceResults to fetch.
  **/
  orderBy?: XOR<Enumerable<RaceResultOrderByInput>, RaceResultOrderByInput>
  /**
   * Sets the position for listing RaceResults.
  **/
  cursor?: RaceResultWhereUniqueInput
  /**
   * The number of RaceResults to fetch. If negative number, it will take RaceResults before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` RaceResults.
  **/
  skip?: number
  distinct?: Enumerable<RaceResultDistinctFieldEnum>
}


/**
 * RaceResult create
 */
export type RaceResultCreateArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * The data needed to create a RaceResult.
  **/
  data: RaceResultCreateInput
}


/**
 * RaceResult update
 */
export type RaceResultUpdateArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * The data needed to update a RaceResult.
  **/
  data: RaceResultUpdateInput
  /**
   * Choose, which RaceResult to update.
  **/
  where: RaceResultWhereUniqueInput
}


/**
 * RaceResult updateMany
 */
export type RaceResultUpdateManyArgs = {
  data: RaceResultUpdateManyMutationInput
  where?: RaceResultWhereInput
}


/**
 * RaceResult upsert
 */
export type RaceResultUpsertArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * The filter to search for the RaceResult to update in case it exists.
  **/
  where: RaceResultWhereUniqueInput
  /**
   * In case the RaceResult found by the `where` argument doesn't exist, create a new RaceResult with this data.
  **/
  create: RaceResultCreateInput
  /**
   * In case the RaceResult was found with the provided `where` argument, update it with this data.
  **/
  update: RaceResultUpdateInput
}


/**
 * RaceResult delete
 */
export type RaceResultDeleteArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
  /**
   * Filter which RaceResult to delete.
  **/
  where: RaceResultWhereUniqueInput
}


/**
 * RaceResult deleteMany
 */
export type RaceResultDeleteManyArgs = {
  where?: RaceResultWhereInput
}


/**
 * RaceResult without action
 */
export type RaceResultArgs = {
  /**
   * Select specific fields to fetch from the RaceResult
  **/
  select?: XOR<RaceResultSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RaceResultInclude, null>
}



/**
 * Model DriverStanding
 */

export type DriverStanding = {
  position: number
  points: number
  wins: number
  seasonYear: number
  driverId: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateDriverStanding = {
  count: number
  avg: DriverStandingAvgAggregateOutputType | null
  sum: DriverStandingSumAggregateOutputType | null
  min: DriverStandingMinAggregateOutputType | null
  max: DriverStandingMaxAggregateOutputType | null
}

export type DriverStandingAvgAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type DriverStandingSumAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type DriverStandingMinAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type DriverStandingMaxAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}


export type DriverStandingAvgAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type DriverStandingSumAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type DriverStandingMinAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type DriverStandingMaxAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type AggregateDriverStandingArgs = {
  where?: DriverStandingWhereInput
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  cursor?: DriverStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
  count?: true
  avg?: DriverStandingAvgAggregateInputType
  sum?: DriverStandingSumAggregateInputType
  min?: DriverStandingMinAggregateInputType
  max?: DriverStandingMaxAggregateInputType
}

export type GetDriverStandingAggregateType<T extends AggregateDriverStandingArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDriverStandingAggregateScalarType<T[P]>
}

export type GetDriverStandingAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DriverStandingAvgAggregateOutputType ? DriverStandingAvgAggregateOutputType[P] : never
}
    
    

export type DriverStandingSelect = {
  position?: boolean
  points?: boolean
  wins?: boolean
  season?: boolean | SeasonArgs
  seasonYear?: boolean
  driver?: boolean | DriverArgs
  driverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DriverStandingInclude = {
  season?: boolean | SeasonArgs
  driver?: boolean | DriverArgs
}

export type DriverStandingGetPayload<
  S extends boolean | null | undefined | DriverStandingArgs,
  U = keyof S
> = S extends true
  ? DriverStanding
  : S extends undefined
  ? never
  : S extends DriverStandingArgs | FindManyDriverStandingArgs
  ? 'include' extends U
    ? DriverStanding  & {
      [P in TrueKeys<S['include']>]:
      P extends 'season'
      ? SeasonGetPayload<S['include'][P]> :
      P extends 'driver'
      ? DriverGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof DriverStanding ? DriverStanding[P]
: 
      P extends 'season'
      ? SeasonGetPayload<S['select'][P]> :
      P extends 'driver'
      ? DriverGetPayload<S['select'][P]> : never
    }
  : DriverStanding
: DriverStanding


export interface DriverStandingDelegate {
  /**
   * Find zero or one DriverStanding that matches the filter.
   * @param {FindOneDriverStandingArgs} args - Arguments to find a DriverStanding
   * @example
   * // Get one DriverStanding
   * const driverStanding = await prisma.driverStanding.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDriverStandingArgs>(
    args: Subset<T, FindOneDriverStandingArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding | null>, Prisma__DriverStandingClient<DriverStandingGetPayload<T> | null>>
  /**
   * Find the first DriverStanding that matches the filter.
   * @param {FindFirstDriverStandingArgs} args - Arguments to find a DriverStanding
   * @example
   * // Get one DriverStanding
   * const driverStanding = await prisma.driverStanding.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDriverStandingArgs>(
    args?: Subset<T, FindFirstDriverStandingArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding | null>, Prisma__DriverStandingClient<DriverStandingGetPayload<T> | null>>
  /**
   * Find zero or more DriverStandings that matches the filter.
   * @param {FindManyDriverStandingArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DriverStandings
   * const driverStandings = await prisma.driverStanding.findMany()
   * 
   * // Get first 10 DriverStandings
   * const driverStandings = await prisma.driverStanding.findMany({ take: 10 })
   * 
   * // Only select the `position`
   * const driverStandingWithPositionOnly = await prisma.driverStanding.findMany({ select: { position: true } })
   * 
  **/
  findMany<T extends FindManyDriverStandingArgs>(
    args?: Subset<T, FindManyDriverStandingArgs>
  ): CheckSelect<T, Promise<Array<DriverStanding>>, Promise<Array<DriverStandingGetPayload<T>>>>
  /**
   * Create a DriverStanding.
   * @param {DriverStandingCreateArgs} args - Arguments to create a DriverStanding.
   * @example
   * // Create one DriverStanding
   * const DriverStanding = await prisma.driverStanding.create({
   *   data: {
   *     // ... data to create a DriverStanding
   *   }
   * })
   * 
  **/
  create<T extends DriverStandingCreateArgs>(
    args: Subset<T, DriverStandingCreateArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Delete a DriverStanding.
   * @param {DriverStandingDeleteArgs} args - Arguments to delete one DriverStanding.
   * @example
   * // Delete one DriverStanding
   * const DriverStanding = await prisma.driverStanding.delete({
   *   where: {
   *     // ... filter to delete one DriverStanding
   *   }
   * })
   * 
  **/
  delete<T extends DriverStandingDeleteArgs>(
    args: Subset<T, DriverStandingDeleteArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Update one DriverStanding.
   * @param {DriverStandingUpdateArgs} args - Arguments to update one DriverStanding.
   * @example
   * // Update one DriverStanding
   * const driverStanding = await prisma.driverStanding.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DriverStandingUpdateArgs>(
    args: Subset<T, DriverStandingUpdateArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Delete zero or more DriverStandings.
   * @param {DriverStandingDeleteManyArgs} args - Arguments to filter DriverStandings to delete.
   * @example
   * // Delete a few DriverStandings
   * const { count } = await prisma.driverStanding.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DriverStandingDeleteManyArgs>(
    args: Subset<T, DriverStandingDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more DriverStandings.
   * @param {DriverStandingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DriverStandings
   * const driverStanding = await prisma.driverStanding.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DriverStandingUpdateManyArgs>(
    args: Subset<T, DriverStandingUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one DriverStanding.
   * @param {DriverStandingUpsertArgs} args - Arguments to update or create a DriverStanding.
   * @example
   * // Update or create a DriverStanding
   * const driverStanding = await prisma.driverStanding.upsert({
   *   create: {
   *     // ... data to create a DriverStanding
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DriverStanding we want to update
   *   }
   * })
  **/
  upsert<T extends DriverStandingUpsertArgs>(
    args: Subset<T, DriverStandingUpsertArgs>
  ): CheckSelect<T, Prisma__DriverStandingClient<DriverStanding>, Prisma__DriverStandingClient<DriverStandingGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDriverStandingArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDriverStandingArgs>(args: Subset<T, AggregateDriverStandingArgs>): Promise<GetDriverStandingAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for DriverStanding.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DriverStandingClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  season<T extends SeasonArgs = {}>(args?: Subset<T, SeasonArgs>): CheckSelect<T, Prisma__SeasonClient<Season | null>, Prisma__SeasonClient<SeasonGetPayload<T> | null>>;

  driver<T extends DriverArgs = {}>(args?: Subset<T, DriverArgs>): CheckSelect<T, Prisma__DriverClient<Driver | null>, Prisma__DriverClient<DriverGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * DriverStanding findOne
 */
export type FindOneDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStanding to fetch.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding findFirst
 */
export type FindFirstDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStanding to fetch.
  **/
  where?: DriverStandingWhereInput
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  cursor?: DriverStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
}


/**
 * DriverStanding findMany
 */
export type FindManyDriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter, which DriverStandings to fetch.
  **/
  where?: DriverStandingWhereInput
  /**
   * Determine the order of the DriverStandings to fetch.
  **/
  orderBy?: XOR<Enumerable<DriverStandingOrderByInput>, DriverStandingOrderByInput>
  /**
   * Sets the position for listing DriverStandings.
  **/
  cursor?: DriverStandingWhereUniqueInput
  /**
   * The number of DriverStandings to fetch. If negative number, it will take DriverStandings before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` DriverStandings.
  **/
  skip?: number
  distinct?: Enumerable<DriverStandingDistinctFieldEnum>
}


/**
 * DriverStanding create
 */
export type DriverStandingCreateArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The data needed to create a DriverStanding.
  **/
  data: DriverStandingCreateInput
}


/**
 * DriverStanding update
 */
export type DriverStandingUpdateArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The data needed to update a DriverStanding.
  **/
  data: DriverStandingUpdateInput
  /**
   * Choose, which DriverStanding to update.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding updateMany
 */
export type DriverStandingUpdateManyArgs = {
  data: DriverStandingUpdateManyMutationInput
  where?: DriverStandingWhereInput
}


/**
 * DriverStanding upsert
 */
export type DriverStandingUpsertArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * The filter to search for the DriverStanding to update in case it exists.
  **/
  where: DriverStandingWhereUniqueInput
  /**
   * In case the DriverStanding found by the `where` argument doesn't exist, create a new DriverStanding with this data.
  **/
  create: DriverStandingCreateInput
  /**
   * In case the DriverStanding was found with the provided `where` argument, update it with this data.
  **/
  update: DriverStandingUpdateInput
}


/**
 * DriverStanding delete
 */
export type DriverStandingDeleteArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
  /**
   * Filter which DriverStanding to delete.
  **/
  where: DriverStandingWhereUniqueInput
}


/**
 * DriverStanding deleteMany
 */
export type DriverStandingDeleteManyArgs = {
  where?: DriverStandingWhereInput
}


/**
 * DriverStanding without action
 */
export type DriverStandingArgs = {
  /**
   * Select specific fields to fetch from the DriverStanding
  **/
  select?: XOR<DriverStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<DriverStandingInclude, null>
}



/**
 * Model TeamStanding
 */

export type TeamStanding = {
  position: number
  points: number
  wins: number
  seasonYear: number
  teamId: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateTeamStanding = {
  count: number
  avg: TeamStandingAvgAggregateOutputType | null
  sum: TeamStandingSumAggregateOutputType | null
  min: TeamStandingMinAggregateOutputType | null
  max: TeamStandingMaxAggregateOutputType | null
}

export type TeamStandingAvgAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type TeamStandingSumAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type TeamStandingMinAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}

export type TeamStandingMaxAggregateOutputType = {
  position: number
  points: number
  wins: number
  seasonYear: number
}


export type TeamStandingAvgAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type TeamStandingSumAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type TeamStandingMinAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type TeamStandingMaxAggregateInputType = {
  position?: true
  points?: true
  wins?: true
  seasonYear?: true
}

export type AggregateTeamStandingArgs = {
  where?: TeamStandingWhereInput
  orderBy?: XOR<Enumerable<TeamStandingOrderByInput>, TeamStandingOrderByInput>
  cursor?: TeamStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TeamStandingDistinctFieldEnum>
  count?: true
  avg?: TeamStandingAvgAggregateInputType
  sum?: TeamStandingSumAggregateInputType
  min?: TeamStandingMinAggregateInputType
  max?: TeamStandingMaxAggregateInputType
}

export type GetTeamStandingAggregateType<T extends AggregateTeamStandingArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTeamStandingAggregateScalarType<T[P]>
}

export type GetTeamStandingAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TeamStandingAvgAggregateOutputType ? TeamStandingAvgAggregateOutputType[P] : never
}
    
    

export type TeamStandingSelect = {
  position?: boolean
  points?: boolean
  wins?: boolean
  season?: boolean | SeasonArgs
  seasonYear?: boolean
  team?: boolean | TeamArgs
  teamId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TeamStandingInclude = {
  season?: boolean | SeasonArgs
  team?: boolean | TeamArgs
}

export type TeamStandingGetPayload<
  S extends boolean | null | undefined | TeamStandingArgs,
  U = keyof S
> = S extends true
  ? TeamStanding
  : S extends undefined
  ? never
  : S extends TeamStandingArgs | FindManyTeamStandingArgs
  ? 'include' extends U
    ? TeamStanding  & {
      [P in TrueKeys<S['include']>]:
      P extends 'season'
      ? SeasonGetPayload<S['include'][P]> :
      P extends 'team'
      ? TeamGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof TeamStanding ? TeamStanding[P]
: 
      P extends 'season'
      ? SeasonGetPayload<S['select'][P]> :
      P extends 'team'
      ? TeamGetPayload<S['select'][P]> : never
    }
  : TeamStanding
: TeamStanding


export interface TeamStandingDelegate {
  /**
   * Find zero or one TeamStanding that matches the filter.
   * @param {FindOneTeamStandingArgs} args - Arguments to find a TeamStanding
   * @example
   * // Get one TeamStanding
   * const teamStanding = await prisma.teamStanding.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTeamStandingArgs>(
    args: Subset<T, FindOneTeamStandingArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding | null>, Prisma__TeamStandingClient<TeamStandingGetPayload<T> | null>>
  /**
   * Find the first TeamStanding that matches the filter.
   * @param {FindFirstTeamStandingArgs} args - Arguments to find a TeamStanding
   * @example
   * // Get one TeamStanding
   * const teamStanding = await prisma.teamStanding.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTeamStandingArgs>(
    args?: Subset<T, FindFirstTeamStandingArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding | null>, Prisma__TeamStandingClient<TeamStandingGetPayload<T> | null>>
  /**
   * Find zero or more TeamStandings that matches the filter.
   * @param {FindManyTeamStandingArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamStandings
   * const teamStandings = await prisma.teamStanding.findMany()
   * 
   * // Get first 10 TeamStandings
   * const teamStandings = await prisma.teamStanding.findMany({ take: 10 })
   * 
   * // Only select the `position`
   * const teamStandingWithPositionOnly = await prisma.teamStanding.findMany({ select: { position: true } })
   * 
  **/
  findMany<T extends FindManyTeamStandingArgs>(
    args?: Subset<T, FindManyTeamStandingArgs>
  ): CheckSelect<T, Promise<Array<TeamStanding>>, Promise<Array<TeamStandingGetPayload<T>>>>
  /**
   * Create a TeamStanding.
   * @param {TeamStandingCreateArgs} args - Arguments to create a TeamStanding.
   * @example
   * // Create one TeamStanding
   * const TeamStanding = await prisma.teamStanding.create({
   *   data: {
   *     // ... data to create a TeamStanding
   *   }
   * })
   * 
  **/
  create<T extends TeamStandingCreateArgs>(
    args: Subset<T, TeamStandingCreateArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding>, Prisma__TeamStandingClient<TeamStandingGetPayload<T>>>
  /**
   * Delete a TeamStanding.
   * @param {TeamStandingDeleteArgs} args - Arguments to delete one TeamStanding.
   * @example
   * // Delete one TeamStanding
   * const TeamStanding = await prisma.teamStanding.delete({
   *   where: {
   *     // ... filter to delete one TeamStanding
   *   }
   * })
   * 
  **/
  delete<T extends TeamStandingDeleteArgs>(
    args: Subset<T, TeamStandingDeleteArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding>, Prisma__TeamStandingClient<TeamStandingGetPayload<T>>>
  /**
   * Update one TeamStanding.
   * @param {TeamStandingUpdateArgs} args - Arguments to update one TeamStanding.
   * @example
   * // Update one TeamStanding
   * const teamStanding = await prisma.teamStanding.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TeamStandingUpdateArgs>(
    args: Subset<T, TeamStandingUpdateArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding>, Prisma__TeamStandingClient<TeamStandingGetPayload<T>>>
  /**
   * Delete zero or more TeamStandings.
   * @param {TeamStandingDeleteManyArgs} args - Arguments to filter TeamStandings to delete.
   * @example
   * // Delete a few TeamStandings
   * const { count } = await prisma.teamStanding.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TeamStandingDeleteManyArgs>(
    args: Subset<T, TeamStandingDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more TeamStandings.
   * @param {TeamStandingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamStandings
   * const teamStanding = await prisma.teamStanding.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TeamStandingUpdateManyArgs>(
    args: Subset<T, TeamStandingUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one TeamStanding.
   * @param {TeamStandingUpsertArgs} args - Arguments to update or create a TeamStanding.
   * @example
   * // Update or create a TeamStanding
   * const teamStanding = await prisma.teamStanding.upsert({
   *   create: {
   *     // ... data to create a TeamStanding
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamStanding we want to update
   *   }
   * })
  **/
  upsert<T extends TeamStandingUpsertArgs>(
    args: Subset<T, TeamStandingUpsertArgs>
  ): CheckSelect<T, Prisma__TeamStandingClient<TeamStanding>, Prisma__TeamStandingClient<TeamStandingGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTeamStandingArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTeamStandingArgs>(args: Subset<T, AggregateTeamStandingArgs>): Promise<GetTeamStandingAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for TeamStanding.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TeamStandingClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  season<T extends SeasonArgs = {}>(args?: Subset<T, SeasonArgs>): CheckSelect<T, Prisma__SeasonClient<Season | null>, Prisma__SeasonClient<SeasonGetPayload<T> | null>>;

  team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null>, Prisma__TeamClient<TeamGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * TeamStanding findOne
 */
export type FindOneTeamStandingArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * Filter, which TeamStanding to fetch.
  **/
  where: TeamStandingWhereUniqueInput
}


/**
 * TeamStanding findFirst
 */
export type FindFirstTeamStandingArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * Filter, which TeamStanding to fetch.
  **/
  where?: TeamStandingWhereInput
  orderBy?: XOR<Enumerable<TeamStandingOrderByInput>, TeamStandingOrderByInput>
  cursor?: TeamStandingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TeamStandingDistinctFieldEnum>
}


/**
 * TeamStanding findMany
 */
export type FindManyTeamStandingArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * Filter, which TeamStandings to fetch.
  **/
  where?: TeamStandingWhereInput
  /**
   * Determine the order of the TeamStandings to fetch.
  **/
  orderBy?: XOR<Enumerable<TeamStandingOrderByInput>, TeamStandingOrderByInput>
  /**
   * Sets the position for listing TeamStandings.
  **/
  cursor?: TeamStandingWhereUniqueInput
  /**
   * The number of TeamStandings to fetch. If negative number, it will take TeamStandings before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` TeamStandings.
  **/
  skip?: number
  distinct?: Enumerable<TeamStandingDistinctFieldEnum>
}


/**
 * TeamStanding create
 */
export type TeamStandingCreateArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * The data needed to create a TeamStanding.
  **/
  data: TeamStandingCreateInput
}


/**
 * TeamStanding update
 */
export type TeamStandingUpdateArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * The data needed to update a TeamStanding.
  **/
  data: TeamStandingUpdateInput
  /**
   * Choose, which TeamStanding to update.
  **/
  where: TeamStandingWhereUniqueInput
}


/**
 * TeamStanding updateMany
 */
export type TeamStandingUpdateManyArgs = {
  data: TeamStandingUpdateManyMutationInput
  where?: TeamStandingWhereInput
}


/**
 * TeamStanding upsert
 */
export type TeamStandingUpsertArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * The filter to search for the TeamStanding to update in case it exists.
  **/
  where: TeamStandingWhereUniqueInput
  /**
   * In case the TeamStanding found by the `where` argument doesn't exist, create a new TeamStanding with this data.
  **/
  create: TeamStandingCreateInput
  /**
   * In case the TeamStanding was found with the provided `where` argument, update it with this data.
  **/
  update: TeamStandingUpdateInput
}


/**
 * TeamStanding delete
 */
export type TeamStandingDeleteArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
  /**
   * Filter which TeamStanding to delete.
  **/
  where: TeamStandingWhereUniqueInput
}


/**
 * TeamStanding deleteMany
 */
export type TeamStandingDeleteManyArgs = {
  where?: TeamStandingWhereInput
}


/**
 * TeamStanding without action
 */
export type TeamStandingArgs = {
  /**
   * Select specific fields to fetch from the TeamStanding
  **/
  select?: XOR<TeamStandingSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TeamStandingInclude, null>
}



/**
 * Model Season
 */

export type Season = {
  year: number
}


export type AggregateSeason = {
  count: number
  avg: SeasonAvgAggregateOutputType | null
  sum: SeasonSumAggregateOutputType | null
  min: SeasonMinAggregateOutputType | null
  max: SeasonMaxAggregateOutputType | null
}

export type SeasonAvgAggregateOutputType = {
  year: number
}

export type SeasonSumAggregateOutputType = {
  year: number
}

export type SeasonMinAggregateOutputType = {
  year: number
}

export type SeasonMaxAggregateOutputType = {
  year: number
}


export type SeasonAvgAggregateInputType = {
  year?: true
}

export type SeasonSumAggregateInputType = {
  year?: true
}

export type SeasonMinAggregateInputType = {
  year?: true
}

export type SeasonMaxAggregateInputType = {
  year?: true
}

export type AggregateSeasonArgs = {
  where?: SeasonWhereInput
  orderBy?: XOR<Enumerable<SeasonOrderByInput>, SeasonOrderByInput>
  cursor?: SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SeasonDistinctFieldEnum>
  count?: true
  avg?: SeasonAvgAggregateInputType
  sum?: SeasonSumAggregateInputType
  min?: SeasonMinAggregateInputType
  max?: SeasonMaxAggregateInputType
}

export type GetSeasonAggregateType<T extends AggregateSeasonArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetSeasonAggregateScalarType<T[P]>
}

export type GetSeasonAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof SeasonAvgAggregateOutputType ? SeasonAvgAggregateOutputType[P] : never
}
    
    

export type SeasonSelect = {
  year?: boolean
  drivers?: boolean | FindManyDriverArgs
  teams?: boolean | FindManyTeamArgs
  driverStandings?: boolean | FindManyDriverStandingArgs
  teamStandings?: boolean | FindManyTeamStandingArgs
  Race?: boolean | FindManyRaceArgs
}

export type SeasonInclude = {
  drivers?: boolean | FindManyDriverArgs
  teams?: boolean | FindManyTeamArgs
  driverStandings?: boolean | FindManyDriverStandingArgs
  teamStandings?: boolean | FindManyTeamStandingArgs
  Race?: boolean | FindManyRaceArgs
}

export type SeasonGetPayload<
  S extends boolean | null | undefined | SeasonArgs,
  U = keyof S
> = S extends true
  ? Season
  : S extends undefined
  ? never
  : S extends SeasonArgs | FindManySeasonArgs
  ? 'include' extends U
    ? Season  & {
      [P in TrueKeys<S['include']>]:
      P extends 'drivers'
      ? Array<DriverGetPayload<S['include'][P]>> :
      P extends 'teams'
      ? Array<TeamGetPayload<S['include'][P]>> :
      P extends 'driverStandings'
      ? Array<DriverStandingGetPayload<S['include'][P]>> :
      P extends 'teamStandings'
      ? Array<TeamStandingGetPayload<S['include'][P]>> :
      P extends 'Race'
      ? Array<RaceGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Season ? Season[P]
: 
      P extends 'drivers'
      ? Array<DriverGetPayload<S['select'][P]>> :
      P extends 'teams'
      ? Array<TeamGetPayload<S['select'][P]>> :
      P extends 'driverStandings'
      ? Array<DriverStandingGetPayload<S['select'][P]>> :
      P extends 'teamStandings'
      ? Array<TeamStandingGetPayload<S['select'][P]>> :
      P extends 'Race'
      ? Array<RaceGetPayload<S['select'][P]>> : never
    }
  : Season
: Season


export interface SeasonDelegate {
  /**
   * Find zero or one Season that matches the filter.
   * @param {FindOneSeasonArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneSeasonArgs>(
    args: Subset<T, FindOneSeasonArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season | null>, Prisma__SeasonClient<SeasonGetPayload<T> | null>>
  /**
   * Find the first Season that matches the filter.
   * @param {FindFirstSeasonArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstSeasonArgs>(
    args?: Subset<T, FindFirstSeasonArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season | null>, Prisma__SeasonClient<SeasonGetPayload<T> | null>>
  /**
   * Find zero or more Seasons that matches the filter.
   * @param {FindManySeasonArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Seasons
   * const seasons = await prisma.season.findMany()
   * 
   * // Get first 10 Seasons
   * const seasons = await prisma.season.findMany({ take: 10 })
   * 
   * // Only select the `year`
   * const seasonWithYearOnly = await prisma.season.findMany({ select: { year: true } })
   * 
  **/
  findMany<T extends FindManySeasonArgs>(
    args?: Subset<T, FindManySeasonArgs>
  ): CheckSelect<T, Promise<Array<Season>>, Promise<Array<SeasonGetPayload<T>>>>
  /**
   * Create a Season.
   * @param {SeasonCreateArgs} args - Arguments to create a Season.
   * @example
   * // Create one Season
   * const Season = await prisma.season.create({
   *   data: {
   *     // ... data to create a Season
   *   }
   * })
   * 
  **/
  create<T extends SeasonCreateArgs>(
    args: Subset<T, SeasonCreateArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season>, Prisma__SeasonClient<SeasonGetPayload<T>>>
  /**
   * Delete a Season.
   * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
   * @example
   * // Delete one Season
   * const Season = await prisma.season.delete({
   *   where: {
   *     // ... filter to delete one Season
   *   }
   * })
   * 
  **/
  delete<T extends SeasonDeleteArgs>(
    args: Subset<T, SeasonDeleteArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season>, Prisma__SeasonClient<SeasonGetPayload<T>>>
  /**
   * Update one Season.
   * @param {SeasonUpdateArgs} args - Arguments to update one Season.
   * @example
   * // Update one Season
   * const season = await prisma.season.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends SeasonUpdateArgs>(
    args: Subset<T, SeasonUpdateArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season>, Prisma__SeasonClient<SeasonGetPayload<T>>>
  /**
   * Delete zero or more Seasons.
   * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
   * @example
   * // Delete a few Seasons
   * const { count } = await prisma.season.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends SeasonDeleteManyArgs>(
    args: Subset<T, SeasonDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Seasons.
   * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Seasons
   * const season = await prisma.season.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends SeasonUpdateManyArgs>(
    args: Subset<T, SeasonUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Season.
   * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
   * @example
   * // Update or create a Season
   * const season = await prisma.season.upsert({
   *   create: {
   *     // ... data to create a Season
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Season we want to update
   *   }
   * })
  **/
  upsert<T extends SeasonUpsertArgs>(
    args: Subset<T, SeasonUpsertArgs>
  ): CheckSelect<T, Prisma__SeasonClient<Season>, Prisma__SeasonClient<SeasonGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManySeasonArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSeasonArgs>(args: Subset<T, AggregateSeasonArgs>): Promise<GetSeasonAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Season.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__SeasonClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  drivers<T extends FindManyDriverArgs = {}>(args?: Subset<T, FindManyDriverArgs>): CheckSelect<T, Promise<Array<Driver>>, Promise<Array<DriverGetPayload<T>>>>;

  teams<T extends FindManyTeamArgs = {}>(args?: Subset<T, FindManyTeamArgs>): CheckSelect<T, Promise<Array<Team>>, Promise<Array<TeamGetPayload<T>>>>;

  driverStandings<T extends FindManyDriverStandingArgs = {}>(args?: Subset<T, FindManyDriverStandingArgs>): CheckSelect<T, Promise<Array<DriverStanding>>, Promise<Array<DriverStandingGetPayload<T>>>>;

  teamStandings<T extends FindManyTeamStandingArgs = {}>(args?: Subset<T, FindManyTeamStandingArgs>): CheckSelect<T, Promise<Array<TeamStanding>>, Promise<Array<TeamStandingGetPayload<T>>>>;

  Race<T extends FindManyRaceArgs = {}>(args?: Subset<T, FindManyRaceArgs>): CheckSelect<T, Promise<Array<Race>>, Promise<Array<RaceGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Season findOne
 */
export type FindOneSeasonArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * Filter, which Season to fetch.
  **/
  where: SeasonWhereUniqueInput
}


/**
 * Season findFirst
 */
export type FindFirstSeasonArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * Filter, which Season to fetch.
  **/
  where?: SeasonWhereInput
  orderBy?: XOR<Enumerable<SeasonOrderByInput>, SeasonOrderByInput>
  cursor?: SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SeasonDistinctFieldEnum>
}


/**
 * Season findMany
 */
export type FindManySeasonArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * Filter, which Seasons to fetch.
  **/
  where?: SeasonWhereInput
  /**
   * Determine the order of the Seasons to fetch.
  **/
  orderBy?: XOR<Enumerable<SeasonOrderByInput>, SeasonOrderByInput>
  /**
   * Sets the position for listing Seasons.
  **/
  cursor?: SeasonWhereUniqueInput
  /**
   * The number of Seasons to fetch. If negative number, it will take Seasons before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Seasons.
  **/
  skip?: number
  distinct?: Enumerable<SeasonDistinctFieldEnum>
}


/**
 * Season create
 */
export type SeasonCreateArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * The data needed to create a Season.
  **/
  data: SeasonCreateInput
}


/**
 * Season update
 */
export type SeasonUpdateArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * The data needed to update a Season.
  **/
  data: SeasonUpdateInput
  /**
   * Choose, which Season to update.
  **/
  where: SeasonWhereUniqueInput
}


/**
 * Season updateMany
 */
export type SeasonUpdateManyArgs = {
  data: SeasonUpdateManyMutationInput
  where?: SeasonWhereInput
}


/**
 * Season upsert
 */
export type SeasonUpsertArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * The filter to search for the Season to update in case it exists.
  **/
  where: SeasonWhereUniqueInput
  /**
   * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
  **/
  create: SeasonCreateInput
  /**
   * In case the Season was found with the provided `where` argument, update it with this data.
  **/
  update: SeasonUpdateInput
}


/**
 * Season delete
 */
export type SeasonDeleteArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
  /**
   * Filter which Season to delete.
  **/
  where: SeasonWhereUniqueInput
}


/**
 * Season deleteMany
 */
export type SeasonDeleteManyArgs = {
  where?: SeasonWhereInput
}


/**
 * Season without action
 */
export type SeasonArgs = {
  /**
   * Select specific fields to fetch from the Season
  **/
  select?: XOR<SeasonSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<SeasonInclude, null>
}



/**
 * Deep Input Types
 */


export type DriverWhereInput = {
  AND?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  OR?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  NOT?: XOR<DriverWhereInput, Enumerable<DriverWhereInput>>
  id?: XOR<StringFilter, string>
  code?: StringNullableFilter | string | null
  givenName?: XOR<StringFilter, string>
  familyName?: XOR<StringFilter, string>
  permanentNumber?: IntNullableFilter | number | null
  dateOfBirth?: XOR<DateTimeFilter, Date | string>
  url?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  seasons?: SeasonListRelationFilter
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
  DriverStanding?: DriverStandingListRelationFilter
  RaceResult?: RaceResultListRelationFilter
}

export type DriverOrderByInput = {
  id?: SortOrder
  code?: SortOrder
  givenName?: SortOrder
  familyName?: SortOrder
  permanentNumber?: SortOrder
  dateOfBirth?: SortOrder
  url?: SortOrder
  nationality?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type DriverWhereUniqueInput = {
  id?: string
}

export type TeamWhereInput = {
  AND?: XOR<TeamWhereInput, Enumerable<TeamWhereInput>>
  OR?: XOR<TeamWhereInput, Enumerable<TeamWhereInput>>
  NOT?: XOR<TeamWhereInput, Enumerable<TeamWhereInput>>
  id?: XOR<StringFilter, string>
  name?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  url?: XOR<StringFilter, string>
  seasons?: SeasonListRelationFilter
  TeamStanding?: TeamStandingListRelationFilter
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
  RaceResult?: RaceResultListRelationFilter
}

export type TeamOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  nationality?: SortOrder
  url?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type TeamWhereUniqueInput = {
  id?: string
}

export type CircuitWhereInput = {
  AND?: XOR<CircuitWhereInput, Enumerable<CircuitWhereInput>>
  OR?: XOR<CircuitWhereInput, Enumerable<CircuitWhereInput>>
  NOT?: XOR<CircuitWhereInput, Enumerable<CircuitWhereInput>>
  id?: XOR<StringFilter, string>
  url?: XOR<StringFilter, string>
  name?: XOR<StringFilter, string>
  city?: XOR<StringFilter, string>
  country?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
  Race?: RaceListRelationFilter
}

export type CircuitOrderByInput = {
  id?: SortOrder
  url?: SortOrder
  name?: SortOrder
  city?: SortOrder
  country?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type CircuitWhereUniqueInput = {
  id?: string
}

export type RaceWhereInput = {
  AND?: XOR<RaceWhereInput, Enumerable<RaceWhereInput>>
  OR?: XOR<RaceWhereInput, Enumerable<RaceWhereInput>>
  NOT?: XOR<RaceWhereInput, Enumerable<RaceWhereInput>>
  round?: XOR<IntFilter, number>
  name?: XOR<StringFilter, string>
  season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  seasonYear?: XOR<IntFilter, number>
  circuitId?: XOR<StringFilter, string>
  circuit?: XOR<CircuitRelationFilter, CircuitWhereInput>
  date?: XOR<DateTimeFilter, Date | string>
  url?: XOR<StringFilter, string>
  RaceResult?: RaceResultListRelationFilter
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type RaceOrderByInput = {
  round?: SortOrder
  name?: SortOrder
  seasonYear?: SortOrder
  circuitId?: SortOrder
  date?: SortOrder
  url?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type RaceWhereUniqueInput = {
  round_seasonYear?: RoundSeasonYearCompoundUniqueInput
}

export type RaceResultWhereInput = {
  AND?: XOR<RaceResultWhereInput, Enumerable<RaceResultWhereInput>>
  OR?: XOR<RaceResultWhereInput, Enumerable<RaceResultWhereInput>>
  NOT?: XOR<RaceResultWhereInput, Enumerable<RaceResultWhereInput>>
  points?: XOR<FloatFilter, number>
  position?: XOR<IntFilter, number>
  grid?: XOR<IntFilter, number>
  laps?: XOR<IntFilter, number>
  time?: StringNullableFilter | string | null
  status?: XOR<StringFilter, string>
  driver?: XOR<DriverRelationFilter, DriverWhereInput>
  driverId?: XOR<StringFilter, string>
  team?: XOR<TeamRelationFilter, TeamWhereInput>
  teamId?: XOR<StringFilter, string>
  raceRound?: XOR<IntFilter, number>
  raceSeasonYear?: XOR<IntFilter, number>
  race?: XOR<RaceRelationFilter, RaceWhereInput>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type RaceResultOrderByInput = {
  points?: SortOrder
  position?: SortOrder
  grid?: SortOrder
  laps?: SortOrder
  time?: SortOrder
  status?: SortOrder
  driverId?: SortOrder
  teamId?: SortOrder
  raceRound?: SortOrder
  raceSeasonYear?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type RaceResultWhereUniqueInput = {
  position_raceRound_raceSeasonYear?: PositionRaceRoundRaceSeasonYearCompoundUniqueInput
}

export type DriverStandingWhereInput = {
  AND?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  OR?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  NOT?: XOR<DriverStandingWhereInput, Enumerable<DriverStandingWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<FloatFilter, number>
  wins?: XOR<IntFilter, number>
  season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  seasonYear?: XOR<IntFilter, number>
  driver?: XOR<DriverRelationFilter, DriverWhereInput>
  driverId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverStandingOrderByInput = {
  position?: SortOrder
  points?: SortOrder
  wins?: SortOrder
  seasonYear?: SortOrder
  driverId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type DriverStandingWhereUniqueInput = {
  position_seasonYear?: PositionSeasonYearCompoundUniqueInput
}

export type TeamStandingWhereInput = {
  AND?: XOR<TeamStandingWhereInput, Enumerable<TeamStandingWhereInput>>
  OR?: XOR<TeamStandingWhereInput, Enumerable<TeamStandingWhereInput>>
  NOT?: XOR<TeamStandingWhereInput, Enumerable<TeamStandingWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<FloatFilter, number>
  wins?: XOR<IntFilter, number>
  season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  seasonYear?: XOR<IntFilter, number>
  team?: XOR<TeamRelationFilter, TeamWhereInput>
  teamId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type TeamStandingOrderByInput = {
  position?: SortOrder
  points?: SortOrder
  wins?: SortOrder
  seasonYear?: SortOrder
  teamId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type TeamStandingWhereUniqueInput = {
  position_seasonYear?: PositionSeasonYearCompoundUniqueInput
}

export type SeasonWhereInput = {
  AND?: XOR<SeasonWhereInput, Enumerable<SeasonWhereInput>>
  OR?: XOR<SeasonWhereInput, Enumerable<SeasonWhereInput>>
  NOT?: XOR<SeasonWhereInput, Enumerable<SeasonWhereInput>>
  year?: XOR<IntFilter, number>
  drivers?: DriverListRelationFilter
  teams?: TeamListRelationFilter
  driverStandings?: DriverStandingListRelationFilter
  teamStandings?: TeamStandingListRelationFilter
  Race?: RaceListRelationFilter
}

export type SeasonOrderByInput = {
  year?: SortOrder
}

export type SeasonWhereUniqueInput = {
  year?: number
}

export type DriverCreateInput = {
  id: string
  code?: XOR<string, null>
  givenName: string
  familyName: string
  permanentNumber?: XOR<number, null>
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutDriversInput
  DriverStanding?: DriverStandingCreateManyWithoutDriverInput
  RaceResult?: RaceResultCreateManyWithoutDriverInput
}

export type DriverUpdateInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: string | NullableStringFieldUpdateOperationsInput | null
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: number | NullableIntFieldUpdateOperationsInput | null
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutDriversInput
  DriverStanding?: DriverStandingUpdateManyWithoutDriverInput
  RaceResult?: RaceResultUpdateManyWithoutDriverInput
}

export type DriverUpdateManyMutationInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: string | NullableStringFieldUpdateOperationsInput | null
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: number | NullableIntFieldUpdateOperationsInput | null
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type TeamCreateInput = {
  id: string
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutTeamsInput
  TeamStanding?: TeamStandingCreateManyWithoutTeamInput
  RaceResult?: RaceResultCreateManyWithoutTeamInput
}

export type TeamUpdateInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutTeamsInput
  TeamStanding?: TeamStandingUpdateManyWithoutTeamInput
  RaceResult?: RaceResultUpdateManyWithoutTeamInput
}

export type TeamUpdateManyMutationInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type CircuitCreateInput = {
  id: string
  url: string
  name: string
  city: string
  country: string
  createdAt?: Date | string
  updatedAt?: Date | string
  Race?: RaceCreateManyWithoutCircuitInput
}

export type CircuitUpdateInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  city?: XOR<string, StringFieldUpdateOperationsInput>
  country?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  Race?: RaceUpdateManyWithoutCircuitInput
}

export type CircuitUpdateManyMutationInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  city?: XOR<string, StringFieldUpdateOperationsInput>
  country?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type RaceCreateInput = {
  round: number
  name: string
  date: Date | string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutRaceInput
  circuit: CircuitCreateOneWithoutRaceInput
  RaceResult?: RaceResultCreateManyWithoutRaceInput
}

export type RaceUpdateInput = {
  round?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutRaceInput
  circuit?: CircuitUpdateOneRequiredWithoutRaceInput
  RaceResult?: RaceResultUpdateManyWithoutRaceInput
}

export type RaceUpdateManyMutationInput = {
  round?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type RaceResultCreateInput = {
  points: number
  position: number
  grid: number
  laps: number
  time?: XOR<string, null>
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driver: DriverCreateOneWithoutRaceResultInput
  team: TeamCreateOneWithoutRaceResultInput
  race: RaceCreateOneWithoutRaceResultInput
}

export type RaceResultUpdateInput = {
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  position?: XOR<number, IntFieldUpdateOperationsInput>
  grid?: XOR<number, IntFieldUpdateOperationsInput>
  laps?: XOR<number, IntFieldUpdateOperationsInput>
  time?: string | NullableStringFieldUpdateOperationsInput | null
  status?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  driver?: DriverUpdateOneRequiredWithoutRaceResultInput
  team?: TeamUpdateOneRequiredWithoutRaceResultInput
  race?: RaceUpdateOneRequiredWithoutRaceResultInput
}

export type RaceResultUpdateManyMutationInput = {
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  position?: XOR<number, IntFieldUpdateOperationsInput>
  grid?: XOR<number, IntFieldUpdateOperationsInput>
  laps?: XOR<number, IntFieldUpdateOperationsInput>
  time?: string | NullableStringFieldUpdateOperationsInput | null
  status?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DriverStandingCreateInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutDriverStandingsInput
  driver: DriverCreateOneWithoutDriverStandingInput
}

export type DriverStandingUpdateInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutDriverStandingsInput
  driver?: DriverUpdateOneRequiredWithoutDriverStandingInput
}

export type DriverStandingUpdateManyMutationInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type TeamStandingCreateInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutTeamStandingsInput
  team: TeamCreateOneWithoutTeamStandingInput
}

export type TeamStandingUpdateInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutTeamStandingsInput
  team?: TeamUpdateOneRequiredWithoutTeamStandingInput
}

export type TeamStandingUpdateManyMutationInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type SeasonCreateInput = {
  year: number
  drivers?: DriverCreateManyWithoutSeasonsInput
  teams?: TeamCreateManyWithoutSeasonsInput
  driverStandings?: DriverStandingCreateManyWithoutSeasonInput
  teamStandings?: TeamStandingCreateManyWithoutSeasonInput
  Race?: RaceCreateManyWithoutSeasonInput
}

export type SeasonUpdateInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  drivers?: DriverUpdateManyWithoutSeasonsInput
  teams?: TeamUpdateManyWithoutSeasonsInput
  driverStandings?: DriverStandingUpdateManyWithoutSeasonInput
  teamStandings?: TeamStandingUpdateManyWithoutSeasonInput
  Race?: RaceUpdateManyWithoutSeasonInput
}

export type SeasonUpdateManyMutationInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: XOR<string, NestedStringFilter>
}

export type StringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type IntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type SeasonListRelationFilter = {
  every?: SeasonWhereInput
  some?: SeasonWhereInput
  none?: SeasonWhereInput
}

export type DriverStandingListRelationFilter = {
  every?: DriverStandingWhereInput
  some?: DriverStandingWhereInput
  none?: DriverStandingWhereInput
}

export type RaceResultListRelationFilter = {
  every?: RaceResultWhereInput
  some?: RaceResultWhereInput
  none?: RaceResultWhereInput
}

export type TeamStandingListRelationFilter = {
  every?: TeamStandingWhereInput
  some?: TeamStandingWhereInput
  none?: TeamStandingWhereInput
}

export type RaceListRelationFilter = {
  every?: RaceWhereInput
  some?: RaceWhereInput
  none?: RaceWhereInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type SeasonRelationFilter = {
  is?: SeasonWhereInput
  isNot?: SeasonWhereInput
}

export type CircuitRelationFilter = {
  is?: CircuitWhereInput
  isNot?: CircuitWhereInput
}

export type RoundSeasonYearCompoundUniqueInput = {
  round: number
  seasonYear: number
}

export type FloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedFloatFilter>
}

export type DriverRelationFilter = {
  is?: DriverWhereInput
  isNot?: DriverWhereInput
}

export type TeamRelationFilter = {
  is?: TeamWhereInput
  isNot?: TeamWhereInput
}

export type RaceRelationFilter = {
  is?: RaceWhereInput
  isNot?: RaceWhereInput
}

export type PositionRaceRoundRaceSeasonYearCompoundUniqueInput = {
  position: number
  raceRound: number
  raceSeasonYear: number
}

export type PositionSeasonYearCompoundUniqueInput = {
  position: number
  seasonYear: number
}

export type DriverListRelationFilter = {
  every?: DriverWhereInput
  some?: DriverWhereInput
  none?: DriverWhereInput
}

export type TeamListRelationFilter = {
  every?: TeamWhereInput
  some?: TeamWhereInput
  none?: TeamWhereInput
}

export type SeasonCreateManyWithoutDriversInput = {
  create?: XOR<SeasonCreateWithoutDriversInput, Enumerable<SeasonCreateWithoutDriversInput>>
  connect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  connectOrCreate?: XOR<SeasonCreateOrConnectWithoutdriversInput, Enumerable<SeasonCreateOrConnectWithoutdriversInput>>
}

export type DriverStandingCreateManyWithoutDriverInput = {
  create?: XOR<DriverStandingCreateWithoutDriverInput, Enumerable<DriverStandingCreateWithoutDriverInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutdriverInput, Enumerable<DriverStandingCreateOrConnectWithoutdriverInput>>
}

export type RaceResultCreateManyWithoutDriverInput = {
  create?: XOR<RaceResultCreateWithoutDriverInput, Enumerable<RaceResultCreateWithoutDriverInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutdriverInput, Enumerable<RaceResultCreateOrConnectWithoutdriverInput>>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: XOR<string, null>
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: XOR<number, null>
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type SeasonUpdateManyWithoutDriversInput = {
  create?: XOR<SeasonCreateWithoutDriversInput, Enumerable<SeasonCreateWithoutDriversInput>>
  connect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  set?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  disconnect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  delete?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  update?: XOR<SeasonUpdateWithWhereUniqueWithoutDriversInput, Enumerable<SeasonUpdateWithWhereUniqueWithoutDriversInput>>
  updateMany?: XOR<SeasonUpdateManyWithWhereWithoutDriversInput, Enumerable<SeasonUpdateManyWithWhereWithoutDriversInput>>
  deleteMany?: XOR<SeasonScalarWhereInput, Enumerable<SeasonScalarWhereInput>>
  upsert?: XOR<SeasonUpsertWithWhereUniqueWithoutDriversInput, Enumerable<SeasonUpsertWithWhereUniqueWithoutDriversInput>>
  connectOrCreate?: XOR<SeasonCreateOrConnectWithoutdriversInput, Enumerable<SeasonCreateOrConnectWithoutdriversInput>>
}

export type DriverStandingUpdateManyWithoutDriverInput = {
  create?: XOR<DriverStandingCreateWithoutDriverInput, Enumerable<DriverStandingCreateWithoutDriverInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  set?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  disconnect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  delete?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  update?: XOR<DriverStandingUpdateWithWhereUniqueWithoutDriverInput, Enumerable<DriverStandingUpdateWithWhereUniqueWithoutDriverInput>>
  updateMany?: XOR<DriverStandingUpdateManyWithWhereWithoutDriverInput, Enumerable<DriverStandingUpdateManyWithWhereWithoutDriverInput>>
  deleteMany?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  upsert?: XOR<DriverStandingUpsertWithWhereUniqueWithoutDriverInput, Enumerable<DriverStandingUpsertWithWhereUniqueWithoutDriverInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutdriverInput, Enumerable<DriverStandingCreateOrConnectWithoutdriverInput>>
}

export type RaceResultUpdateManyWithoutDriverInput = {
  create?: XOR<RaceResultCreateWithoutDriverInput, Enumerable<RaceResultCreateWithoutDriverInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  set?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  disconnect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  delete?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  update?: XOR<RaceResultUpdateWithWhereUniqueWithoutDriverInput, Enumerable<RaceResultUpdateWithWhereUniqueWithoutDriverInput>>
  updateMany?: XOR<RaceResultUpdateManyWithWhereWithoutDriverInput, Enumerable<RaceResultUpdateManyWithWhereWithoutDriverInput>>
  deleteMany?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  upsert?: XOR<RaceResultUpsertWithWhereUniqueWithoutDriverInput, Enumerable<RaceResultUpsertWithWhereUniqueWithoutDriverInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutdriverInput, Enumerable<RaceResultCreateOrConnectWithoutdriverInput>>
}

export type SeasonCreateManyWithoutTeamsInput = {
  create?: XOR<SeasonCreateWithoutTeamsInput, Enumerable<SeasonCreateWithoutTeamsInput>>
  connect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  connectOrCreate?: XOR<SeasonCreateOrConnectWithoutteamsInput, Enumerable<SeasonCreateOrConnectWithoutteamsInput>>
}

export type TeamStandingCreateManyWithoutTeamInput = {
  create?: XOR<TeamStandingCreateWithoutTeamInput, Enumerable<TeamStandingCreateWithoutTeamInput>>
  connect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  connectOrCreate?: XOR<TeamStandingCreateOrConnectWithoutteamInput, Enumerable<TeamStandingCreateOrConnectWithoutteamInput>>
}

export type RaceResultCreateManyWithoutTeamInput = {
  create?: XOR<RaceResultCreateWithoutTeamInput, Enumerable<RaceResultCreateWithoutTeamInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutteamInput, Enumerable<RaceResultCreateOrConnectWithoutteamInput>>
}

export type SeasonUpdateManyWithoutTeamsInput = {
  create?: XOR<SeasonCreateWithoutTeamsInput, Enumerable<SeasonCreateWithoutTeamsInput>>
  connect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  set?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  disconnect?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  delete?: XOR<SeasonWhereUniqueInput, Enumerable<SeasonWhereUniqueInput>>
  update?: XOR<SeasonUpdateWithWhereUniqueWithoutTeamsInput, Enumerable<SeasonUpdateWithWhereUniqueWithoutTeamsInput>>
  updateMany?: XOR<SeasonUpdateManyWithWhereWithoutTeamsInput, Enumerable<SeasonUpdateManyWithWhereWithoutTeamsInput>>
  deleteMany?: XOR<SeasonScalarWhereInput, Enumerable<SeasonScalarWhereInput>>
  upsert?: XOR<SeasonUpsertWithWhereUniqueWithoutTeamsInput, Enumerable<SeasonUpsertWithWhereUniqueWithoutTeamsInput>>
  connectOrCreate?: XOR<SeasonCreateOrConnectWithoutteamsInput, Enumerable<SeasonCreateOrConnectWithoutteamsInput>>
}

export type TeamStandingUpdateManyWithoutTeamInput = {
  create?: XOR<TeamStandingCreateWithoutTeamInput, Enumerable<TeamStandingCreateWithoutTeamInput>>
  connect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  set?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  disconnect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  delete?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  update?: XOR<TeamStandingUpdateWithWhereUniqueWithoutTeamInput, Enumerable<TeamStandingUpdateWithWhereUniqueWithoutTeamInput>>
  updateMany?: XOR<TeamStandingUpdateManyWithWhereWithoutTeamInput, Enumerable<TeamStandingUpdateManyWithWhereWithoutTeamInput>>
  deleteMany?: XOR<TeamStandingScalarWhereInput, Enumerable<TeamStandingScalarWhereInput>>
  upsert?: XOR<TeamStandingUpsertWithWhereUniqueWithoutTeamInput, Enumerable<TeamStandingUpsertWithWhereUniqueWithoutTeamInput>>
  connectOrCreate?: XOR<TeamStandingCreateOrConnectWithoutteamInput, Enumerable<TeamStandingCreateOrConnectWithoutteamInput>>
}

export type RaceResultUpdateManyWithoutTeamInput = {
  create?: XOR<RaceResultCreateWithoutTeamInput, Enumerable<RaceResultCreateWithoutTeamInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  set?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  disconnect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  delete?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  update?: XOR<RaceResultUpdateWithWhereUniqueWithoutTeamInput, Enumerable<RaceResultUpdateWithWhereUniqueWithoutTeamInput>>
  updateMany?: XOR<RaceResultUpdateManyWithWhereWithoutTeamInput, Enumerable<RaceResultUpdateManyWithWhereWithoutTeamInput>>
  deleteMany?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  upsert?: XOR<RaceResultUpsertWithWhereUniqueWithoutTeamInput, Enumerable<RaceResultUpsertWithWhereUniqueWithoutTeamInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutteamInput, Enumerable<RaceResultCreateOrConnectWithoutteamInput>>
}

export type RaceCreateManyWithoutCircuitInput = {
  create?: XOR<RaceCreateWithoutCircuitInput, Enumerable<RaceCreateWithoutCircuitInput>>
  connect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  connectOrCreate?: XOR<RaceCreateOrConnectWithoutcircuitInput, Enumerable<RaceCreateOrConnectWithoutcircuitInput>>
}

export type RaceUpdateManyWithoutCircuitInput = {
  create?: XOR<RaceCreateWithoutCircuitInput, Enumerable<RaceCreateWithoutCircuitInput>>
  connect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  set?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  disconnect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  delete?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  update?: XOR<RaceUpdateWithWhereUniqueWithoutCircuitInput, Enumerable<RaceUpdateWithWhereUniqueWithoutCircuitInput>>
  updateMany?: XOR<RaceUpdateManyWithWhereWithoutCircuitInput, Enumerable<RaceUpdateManyWithWhereWithoutCircuitInput>>
  deleteMany?: XOR<RaceScalarWhereInput, Enumerable<RaceScalarWhereInput>>
  upsert?: XOR<RaceUpsertWithWhereUniqueWithoutCircuitInput, Enumerable<RaceUpsertWithWhereUniqueWithoutCircuitInput>>
  connectOrCreate?: XOR<RaceCreateOrConnectWithoutcircuitInput, Enumerable<RaceCreateOrConnectWithoutcircuitInput>>
}

export type SeasonCreateOneWithoutRaceInput = {
  create?: SeasonCreateWithoutRaceInput
  connect?: SeasonWhereUniqueInput
  connectOrCreate?: SeasonCreateOrConnectWithoutRaceInput
}

export type CircuitCreateOneWithoutRaceInput = {
  create?: CircuitCreateWithoutRaceInput
  connect?: CircuitWhereUniqueInput
  connectOrCreate?: CircuitCreateOrConnectWithoutRaceInput
}

export type RaceResultCreateManyWithoutRaceInput = {
  create?: XOR<RaceResultCreateWithoutRaceInput, Enumerable<RaceResultCreateWithoutRaceInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutraceInput, Enumerable<RaceResultCreateOrConnectWithoutraceInput>>
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type SeasonUpdateOneRequiredWithoutRaceInput = {
  create?: SeasonCreateWithoutRaceInput
  connect?: SeasonWhereUniqueInput
  update?: SeasonUpdateWithoutRaceInput
  upsert?: SeasonUpsertWithoutRaceInput
  connectOrCreate?: SeasonCreateOrConnectWithoutRaceInput
}

export type CircuitUpdateOneRequiredWithoutRaceInput = {
  create?: CircuitCreateWithoutRaceInput
  connect?: CircuitWhereUniqueInput
  update?: CircuitUpdateWithoutRaceInput
  upsert?: CircuitUpsertWithoutRaceInput
  connectOrCreate?: CircuitCreateOrConnectWithoutRaceInput
}

export type RaceResultUpdateManyWithoutRaceInput = {
  create?: XOR<RaceResultCreateWithoutRaceInput, Enumerable<RaceResultCreateWithoutRaceInput>>
  connect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  set?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  disconnect?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  delete?: XOR<RaceResultWhereUniqueInput, Enumerable<RaceResultWhereUniqueInput>>
  update?: XOR<RaceResultUpdateWithWhereUniqueWithoutRaceInput, Enumerable<RaceResultUpdateWithWhereUniqueWithoutRaceInput>>
  updateMany?: XOR<RaceResultUpdateManyWithWhereWithoutRaceInput, Enumerable<RaceResultUpdateManyWithWhereWithoutRaceInput>>
  deleteMany?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  upsert?: XOR<RaceResultUpsertWithWhereUniqueWithoutRaceInput, Enumerable<RaceResultUpsertWithWhereUniqueWithoutRaceInput>>
  connectOrCreate?: XOR<RaceResultCreateOrConnectWithoutraceInput, Enumerable<RaceResultCreateOrConnectWithoutraceInput>>
}

export type DriverCreateOneWithoutRaceResultInput = {
  create?: DriverCreateWithoutRaceResultInput
  connect?: DriverWhereUniqueInput
  connectOrCreate?: DriverCreateOrConnectWithoutRaceResultInput
}

export type TeamCreateOneWithoutRaceResultInput = {
  create?: TeamCreateWithoutRaceResultInput
  connect?: TeamWhereUniqueInput
  connectOrCreate?: TeamCreateOrConnectWithoutRaceResultInput
}

export type RaceCreateOneWithoutRaceResultInput = {
  create?: RaceCreateWithoutRaceResultInput
  connect?: RaceWhereUniqueInput
  connectOrCreate?: RaceCreateOrConnectWithoutRaceResultInput
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DriverUpdateOneRequiredWithoutRaceResultInput = {
  create?: DriverCreateWithoutRaceResultInput
  connect?: DriverWhereUniqueInput
  update?: DriverUpdateWithoutRaceResultInput
  upsert?: DriverUpsertWithoutRaceResultInput
  connectOrCreate?: DriverCreateOrConnectWithoutRaceResultInput
}

export type TeamUpdateOneRequiredWithoutRaceResultInput = {
  create?: TeamCreateWithoutRaceResultInput
  connect?: TeamWhereUniqueInput
  update?: TeamUpdateWithoutRaceResultInput
  upsert?: TeamUpsertWithoutRaceResultInput
  connectOrCreate?: TeamCreateOrConnectWithoutRaceResultInput
}

export type RaceUpdateOneRequiredWithoutRaceResultInput = {
  create?: RaceCreateWithoutRaceResultInput
  connect?: RaceWhereUniqueInput
  update?: RaceUpdateWithoutRaceResultInput
  upsert?: RaceUpsertWithoutRaceResultInput
  connectOrCreate?: RaceCreateOrConnectWithoutRaceResultInput
}

export type SeasonCreateOneWithoutDriverStandingsInput = {
  create?: SeasonCreateWithoutDriverStandingsInput
  connect?: SeasonWhereUniqueInput
  connectOrCreate?: SeasonCreateOrConnectWithoutdriverStandingsInput
}

export type DriverCreateOneWithoutDriverStandingInput = {
  create?: DriverCreateWithoutDriverStandingInput
  connect?: DriverWhereUniqueInput
  connectOrCreate?: DriverCreateOrConnectWithoutDriverStandingInput
}

export type SeasonUpdateOneRequiredWithoutDriverStandingsInput = {
  create?: SeasonCreateWithoutDriverStandingsInput
  connect?: SeasonWhereUniqueInput
  update?: SeasonUpdateWithoutDriverStandingsInput
  upsert?: SeasonUpsertWithoutDriverStandingsInput
  connectOrCreate?: SeasonCreateOrConnectWithoutdriverStandingsInput
}

export type DriverUpdateOneRequiredWithoutDriverStandingInput = {
  create?: DriverCreateWithoutDriverStandingInput
  connect?: DriverWhereUniqueInput
  update?: DriverUpdateWithoutDriverStandingInput
  upsert?: DriverUpsertWithoutDriverStandingInput
  connectOrCreate?: DriverCreateOrConnectWithoutDriverStandingInput
}

export type SeasonCreateOneWithoutTeamStandingsInput = {
  create?: SeasonCreateWithoutTeamStandingsInput
  connect?: SeasonWhereUniqueInput
  connectOrCreate?: SeasonCreateOrConnectWithoutteamStandingsInput
}

export type TeamCreateOneWithoutTeamStandingInput = {
  create?: TeamCreateWithoutTeamStandingInput
  connect?: TeamWhereUniqueInput
  connectOrCreate?: TeamCreateOrConnectWithoutTeamStandingInput
}

export type SeasonUpdateOneRequiredWithoutTeamStandingsInput = {
  create?: SeasonCreateWithoutTeamStandingsInput
  connect?: SeasonWhereUniqueInput
  update?: SeasonUpdateWithoutTeamStandingsInput
  upsert?: SeasonUpsertWithoutTeamStandingsInput
  connectOrCreate?: SeasonCreateOrConnectWithoutteamStandingsInput
}

export type TeamUpdateOneRequiredWithoutTeamStandingInput = {
  create?: TeamCreateWithoutTeamStandingInput
  connect?: TeamWhereUniqueInput
  update?: TeamUpdateWithoutTeamStandingInput
  upsert?: TeamUpsertWithoutTeamStandingInput
  connectOrCreate?: TeamCreateOrConnectWithoutTeamStandingInput
}

export type DriverCreateManyWithoutSeasonsInput = {
  create?: XOR<DriverCreateWithoutSeasonsInput, Enumerable<DriverCreateWithoutSeasonsInput>>
  connect?: XOR<DriverWhereUniqueInput, Enumerable<DriverWhereUniqueInput>>
  connectOrCreate?: XOR<DriverCreateOrConnectWithoutseasonsInput, Enumerable<DriverCreateOrConnectWithoutseasonsInput>>
}

export type TeamCreateManyWithoutSeasonsInput = {
  create?: XOR<TeamCreateWithoutSeasonsInput, Enumerable<TeamCreateWithoutSeasonsInput>>
  connect?: XOR<TeamWhereUniqueInput, Enumerable<TeamWhereUniqueInput>>
  connectOrCreate?: XOR<TeamCreateOrConnectWithoutseasonsInput, Enumerable<TeamCreateOrConnectWithoutseasonsInput>>
}

export type DriverStandingCreateManyWithoutSeasonInput = {
  create?: XOR<DriverStandingCreateWithoutSeasonInput, Enumerable<DriverStandingCreateWithoutSeasonInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutseasonInput, Enumerable<DriverStandingCreateOrConnectWithoutseasonInput>>
}

export type TeamStandingCreateManyWithoutSeasonInput = {
  create?: XOR<TeamStandingCreateWithoutSeasonInput, Enumerable<TeamStandingCreateWithoutSeasonInput>>
  connect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  connectOrCreate?: XOR<TeamStandingCreateOrConnectWithoutseasonInput, Enumerable<TeamStandingCreateOrConnectWithoutseasonInput>>
}

export type RaceCreateManyWithoutSeasonInput = {
  create?: XOR<RaceCreateWithoutSeasonInput, Enumerable<RaceCreateWithoutSeasonInput>>
  connect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  connectOrCreate?: XOR<RaceCreateOrConnectWithoutseasonInput, Enumerable<RaceCreateOrConnectWithoutseasonInput>>
}

export type DriverUpdateManyWithoutSeasonsInput = {
  create?: XOR<DriverCreateWithoutSeasonsInput, Enumerable<DriverCreateWithoutSeasonsInput>>
  connect?: XOR<DriverWhereUniqueInput, Enumerable<DriverWhereUniqueInput>>
  set?: XOR<DriverWhereUniqueInput, Enumerable<DriverWhereUniqueInput>>
  disconnect?: XOR<DriverWhereUniqueInput, Enumerable<DriverWhereUniqueInput>>
  delete?: XOR<DriverWhereUniqueInput, Enumerable<DriverWhereUniqueInput>>
  update?: XOR<DriverUpdateWithWhereUniqueWithoutSeasonsInput, Enumerable<DriverUpdateWithWhereUniqueWithoutSeasonsInput>>
  updateMany?: XOR<DriverUpdateManyWithWhereWithoutSeasonsInput, Enumerable<DriverUpdateManyWithWhereWithoutSeasonsInput>>
  deleteMany?: XOR<DriverScalarWhereInput, Enumerable<DriverScalarWhereInput>>
  upsert?: XOR<DriverUpsertWithWhereUniqueWithoutSeasonsInput, Enumerable<DriverUpsertWithWhereUniqueWithoutSeasonsInput>>
  connectOrCreate?: XOR<DriverCreateOrConnectWithoutseasonsInput, Enumerable<DriverCreateOrConnectWithoutseasonsInput>>
}

export type TeamUpdateManyWithoutSeasonsInput = {
  create?: XOR<TeamCreateWithoutSeasonsInput, Enumerable<TeamCreateWithoutSeasonsInput>>
  connect?: XOR<TeamWhereUniqueInput, Enumerable<TeamWhereUniqueInput>>
  set?: XOR<TeamWhereUniqueInput, Enumerable<TeamWhereUniqueInput>>
  disconnect?: XOR<TeamWhereUniqueInput, Enumerable<TeamWhereUniqueInput>>
  delete?: XOR<TeamWhereUniqueInput, Enumerable<TeamWhereUniqueInput>>
  update?: XOR<TeamUpdateWithWhereUniqueWithoutSeasonsInput, Enumerable<TeamUpdateWithWhereUniqueWithoutSeasonsInput>>
  updateMany?: XOR<TeamUpdateManyWithWhereWithoutSeasonsInput, Enumerable<TeamUpdateManyWithWhereWithoutSeasonsInput>>
  deleteMany?: XOR<TeamScalarWhereInput, Enumerable<TeamScalarWhereInput>>
  upsert?: XOR<TeamUpsertWithWhereUniqueWithoutSeasonsInput, Enumerable<TeamUpsertWithWhereUniqueWithoutSeasonsInput>>
  connectOrCreate?: XOR<TeamCreateOrConnectWithoutseasonsInput, Enumerable<TeamCreateOrConnectWithoutseasonsInput>>
}

export type DriverStandingUpdateManyWithoutSeasonInput = {
  create?: XOR<DriverStandingCreateWithoutSeasonInput, Enumerable<DriverStandingCreateWithoutSeasonInput>>
  connect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  set?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  disconnect?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  delete?: XOR<DriverStandingWhereUniqueInput, Enumerable<DriverStandingWhereUniqueInput>>
  update?: XOR<DriverStandingUpdateWithWhereUniqueWithoutSeasonInput, Enumerable<DriverStandingUpdateWithWhereUniqueWithoutSeasonInput>>
  updateMany?: XOR<DriverStandingUpdateManyWithWhereWithoutSeasonInput, Enumerable<DriverStandingUpdateManyWithWhereWithoutSeasonInput>>
  deleteMany?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  upsert?: XOR<DriverStandingUpsertWithWhereUniqueWithoutSeasonInput, Enumerable<DriverStandingUpsertWithWhereUniqueWithoutSeasonInput>>
  connectOrCreate?: XOR<DriverStandingCreateOrConnectWithoutseasonInput, Enumerable<DriverStandingCreateOrConnectWithoutseasonInput>>
}

export type TeamStandingUpdateManyWithoutSeasonInput = {
  create?: XOR<TeamStandingCreateWithoutSeasonInput, Enumerable<TeamStandingCreateWithoutSeasonInput>>
  connect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  set?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  disconnect?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  delete?: XOR<TeamStandingWhereUniqueInput, Enumerable<TeamStandingWhereUniqueInput>>
  update?: XOR<TeamStandingUpdateWithWhereUniqueWithoutSeasonInput, Enumerable<TeamStandingUpdateWithWhereUniqueWithoutSeasonInput>>
  updateMany?: XOR<TeamStandingUpdateManyWithWhereWithoutSeasonInput, Enumerable<TeamStandingUpdateManyWithWhereWithoutSeasonInput>>
  deleteMany?: XOR<TeamStandingScalarWhereInput, Enumerable<TeamStandingScalarWhereInput>>
  upsert?: XOR<TeamStandingUpsertWithWhereUniqueWithoutSeasonInput, Enumerable<TeamStandingUpsertWithWhereUniqueWithoutSeasonInput>>
  connectOrCreate?: XOR<TeamStandingCreateOrConnectWithoutseasonInput, Enumerable<TeamStandingCreateOrConnectWithoutseasonInput>>
}

export type RaceUpdateManyWithoutSeasonInput = {
  create?: XOR<RaceCreateWithoutSeasonInput, Enumerable<RaceCreateWithoutSeasonInput>>
  connect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  set?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  disconnect?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  delete?: XOR<RaceWhereUniqueInput, Enumerable<RaceWhereUniqueInput>>
  update?: XOR<RaceUpdateWithWhereUniqueWithoutSeasonInput, Enumerable<RaceUpdateWithWhereUniqueWithoutSeasonInput>>
  updateMany?: XOR<RaceUpdateManyWithWhereWithoutSeasonInput, Enumerable<RaceUpdateManyWithWhereWithoutSeasonInput>>
  deleteMany?: XOR<RaceScalarWhereInput, Enumerable<RaceScalarWhereInput>>
  upsert?: XOR<RaceUpsertWithWhereUniqueWithoutSeasonInput, Enumerable<RaceUpsertWithWhereUniqueWithoutSeasonInput>>
  connectOrCreate?: XOR<RaceCreateOrConnectWithoutseasonInput, Enumerable<RaceCreateOrConnectWithoutseasonInput>>
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type NestedStringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type NestedFloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedFloatFilter>
}

export type SeasonCreateWithoutDriversInput = {
  year: number
  teams?: TeamCreateManyWithoutSeasonsInput
  driverStandings?: DriverStandingCreateManyWithoutSeasonInput
  teamStandings?: TeamStandingCreateManyWithoutSeasonInput
  Race?: RaceCreateManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutdriversInput = {
  where: SeasonWhereUniqueInput
  create: SeasonCreateWithoutDriversInput
}

export type DriverStandingCreateWithoutDriverInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutDriverStandingsInput
}

export type DriverStandingCreateOrConnectWithoutdriverInput = {
  where: DriverStandingWhereUniqueInput
  create: DriverStandingCreateWithoutDriverInput
}

export type RaceResultCreateWithoutDriverInput = {
  points: number
  position: number
  grid: number
  laps: number
  time?: XOR<string, null>
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  team: TeamCreateOneWithoutRaceResultInput
  race: RaceCreateOneWithoutRaceResultInput
}

export type RaceResultCreateOrConnectWithoutdriverInput = {
  where: RaceResultWhereUniqueInput
  create: RaceResultCreateWithoutDriverInput
}

export type SeasonUpdateWithWhereUniqueWithoutDriversInput = {
  where: SeasonWhereUniqueInput
  data: SeasonUpdateWithoutDriversInput
}

export type SeasonUpdateManyWithWhereWithoutDriversInput = {
  where: SeasonScalarWhereInput
  data: SeasonUpdateManyMutationInput
}

export type SeasonScalarWhereInput = {
  AND?: XOR<SeasonScalarWhereInput, Enumerable<SeasonScalarWhereInput>>
  OR?: XOR<SeasonScalarWhereInput, Enumerable<SeasonScalarWhereInput>>
  NOT?: XOR<SeasonScalarWhereInput, Enumerable<SeasonScalarWhereInput>>
  year?: XOR<IntFilter, number>
}

export type SeasonUpsertWithWhereUniqueWithoutDriversInput = {
  where: SeasonWhereUniqueInput
  update: SeasonUpdateWithoutDriversInput
  create: SeasonCreateWithoutDriversInput
}

export type DriverStandingUpdateWithWhereUniqueWithoutDriverInput = {
  where: DriverStandingWhereUniqueInput
  data: DriverStandingUpdateWithoutDriverInput
}

export type DriverStandingUpdateManyWithWhereWithoutDriverInput = {
  where: DriverStandingScalarWhereInput
  data: DriverStandingUpdateManyMutationInput
}

export type DriverStandingScalarWhereInput = {
  AND?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  OR?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  NOT?: XOR<DriverStandingScalarWhereInput, Enumerable<DriverStandingScalarWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<FloatFilter, number>
  wins?: XOR<IntFilter, number>
  seasonYear?: XOR<IntFilter, number>
  driverId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverStandingUpsertWithWhereUniqueWithoutDriverInput = {
  where: DriverStandingWhereUniqueInput
  update: DriverStandingUpdateWithoutDriverInput
  create: DriverStandingCreateWithoutDriverInput
}

export type RaceResultUpdateWithWhereUniqueWithoutDriverInput = {
  where: RaceResultWhereUniqueInput
  data: RaceResultUpdateWithoutDriverInput
}

export type RaceResultUpdateManyWithWhereWithoutDriverInput = {
  where: RaceResultScalarWhereInput
  data: RaceResultUpdateManyMutationInput
}

export type RaceResultScalarWhereInput = {
  AND?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  OR?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  NOT?: XOR<RaceResultScalarWhereInput, Enumerable<RaceResultScalarWhereInput>>
  points?: XOR<FloatFilter, number>
  position?: XOR<IntFilter, number>
  grid?: XOR<IntFilter, number>
  laps?: XOR<IntFilter, number>
  time?: StringNullableFilter | string | null
  status?: XOR<StringFilter, string>
  driverId?: XOR<StringFilter, string>
  teamId?: XOR<StringFilter, string>
  raceRound?: XOR<IntFilter, number>
  raceSeasonYear?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type RaceResultUpsertWithWhereUniqueWithoutDriverInput = {
  where: RaceResultWhereUniqueInput
  update: RaceResultUpdateWithoutDriverInput
  create: RaceResultCreateWithoutDriverInput
}

export type SeasonCreateWithoutTeamsInput = {
  year: number
  drivers?: DriverCreateManyWithoutSeasonsInput
  driverStandings?: DriverStandingCreateManyWithoutSeasonInput
  teamStandings?: TeamStandingCreateManyWithoutSeasonInput
  Race?: RaceCreateManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutteamsInput = {
  where: SeasonWhereUniqueInput
  create: SeasonCreateWithoutTeamsInput
}

export type TeamStandingCreateWithoutTeamInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutTeamStandingsInput
}

export type TeamStandingCreateOrConnectWithoutteamInput = {
  where: TeamStandingWhereUniqueInput
  create: TeamStandingCreateWithoutTeamInput
}

export type RaceResultCreateWithoutTeamInput = {
  points: number
  position: number
  grid: number
  laps: number
  time?: XOR<string, null>
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driver: DriverCreateOneWithoutRaceResultInput
  race: RaceCreateOneWithoutRaceResultInput
}

export type RaceResultCreateOrConnectWithoutteamInput = {
  where: RaceResultWhereUniqueInput
  create: RaceResultCreateWithoutTeamInput
}

export type SeasonUpdateWithWhereUniqueWithoutTeamsInput = {
  where: SeasonWhereUniqueInput
  data: SeasonUpdateWithoutTeamsInput
}

export type SeasonUpdateManyWithWhereWithoutTeamsInput = {
  where: SeasonScalarWhereInput
  data: SeasonUpdateManyMutationInput
}

export type SeasonUpsertWithWhereUniqueWithoutTeamsInput = {
  where: SeasonWhereUniqueInput
  update: SeasonUpdateWithoutTeamsInput
  create: SeasonCreateWithoutTeamsInput
}

export type TeamStandingUpdateWithWhereUniqueWithoutTeamInput = {
  where: TeamStandingWhereUniqueInput
  data: TeamStandingUpdateWithoutTeamInput
}

export type TeamStandingUpdateManyWithWhereWithoutTeamInput = {
  where: TeamStandingScalarWhereInput
  data: TeamStandingUpdateManyMutationInput
}

export type TeamStandingScalarWhereInput = {
  AND?: XOR<TeamStandingScalarWhereInput, Enumerable<TeamStandingScalarWhereInput>>
  OR?: XOR<TeamStandingScalarWhereInput, Enumerable<TeamStandingScalarWhereInput>>
  NOT?: XOR<TeamStandingScalarWhereInput, Enumerable<TeamStandingScalarWhereInput>>
  position?: XOR<IntFilter, number>
  points?: XOR<FloatFilter, number>
  wins?: XOR<IntFilter, number>
  seasonYear?: XOR<IntFilter, number>
  teamId?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type TeamStandingUpsertWithWhereUniqueWithoutTeamInput = {
  where: TeamStandingWhereUniqueInput
  update: TeamStandingUpdateWithoutTeamInput
  create: TeamStandingCreateWithoutTeamInput
}

export type RaceResultUpdateWithWhereUniqueWithoutTeamInput = {
  where: RaceResultWhereUniqueInput
  data: RaceResultUpdateWithoutTeamInput
}

export type RaceResultUpdateManyWithWhereWithoutTeamInput = {
  where: RaceResultScalarWhereInput
  data: RaceResultUpdateManyMutationInput
}

export type RaceResultUpsertWithWhereUniqueWithoutTeamInput = {
  where: RaceResultWhereUniqueInput
  update: RaceResultUpdateWithoutTeamInput
  create: RaceResultCreateWithoutTeamInput
}

export type RaceCreateWithoutCircuitInput = {
  round: number
  name: string
  date: Date | string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutRaceInput
  RaceResult?: RaceResultCreateManyWithoutRaceInput
}

export type RaceCreateOrConnectWithoutcircuitInput = {
  where: RaceWhereUniqueInput
  create: RaceCreateWithoutCircuitInput
}

export type RaceUpdateWithWhereUniqueWithoutCircuitInput = {
  where: RaceWhereUniqueInput
  data: RaceUpdateWithoutCircuitInput
}

export type RaceUpdateManyWithWhereWithoutCircuitInput = {
  where: RaceScalarWhereInput
  data: RaceUpdateManyMutationInput
}

export type RaceScalarWhereInput = {
  AND?: XOR<RaceScalarWhereInput, Enumerable<RaceScalarWhereInput>>
  OR?: XOR<RaceScalarWhereInput, Enumerable<RaceScalarWhereInput>>
  NOT?: XOR<RaceScalarWhereInput, Enumerable<RaceScalarWhereInput>>
  round?: XOR<IntFilter, number>
  name?: XOR<StringFilter, string>
  seasonYear?: XOR<IntFilter, number>
  circuitId?: XOR<StringFilter, string>
  date?: XOR<DateTimeFilter, Date | string>
  url?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type RaceUpsertWithWhereUniqueWithoutCircuitInput = {
  where: RaceWhereUniqueInput
  update: RaceUpdateWithoutCircuitInput
  create: RaceCreateWithoutCircuitInput
}

export type SeasonCreateWithoutRaceInput = {
  year: number
  drivers?: DriverCreateManyWithoutSeasonsInput
  teams?: TeamCreateManyWithoutSeasonsInput
  driverStandings?: DriverStandingCreateManyWithoutSeasonInput
  teamStandings?: TeamStandingCreateManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutRaceInput = {
  where: SeasonWhereUniqueInput
  create: SeasonCreateWithoutRaceInput
}

export type CircuitCreateWithoutRaceInput = {
  id: string
  url: string
  name: string
  city: string
  country: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CircuitCreateOrConnectWithoutRaceInput = {
  where: CircuitWhereUniqueInput
  create: CircuitCreateWithoutRaceInput
}

export type RaceResultCreateWithoutRaceInput = {
  points: number
  position: number
  grid: number
  laps: number
  time?: XOR<string, null>
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driver: DriverCreateOneWithoutRaceResultInput
  team: TeamCreateOneWithoutRaceResultInput
}

export type RaceResultCreateOrConnectWithoutraceInput = {
  where: RaceResultWhereUniqueInput
  create: RaceResultCreateWithoutRaceInput
}

export type SeasonUpdateWithoutRaceInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  drivers?: DriverUpdateManyWithoutSeasonsInput
  teams?: TeamUpdateManyWithoutSeasonsInput
  driverStandings?: DriverStandingUpdateManyWithoutSeasonInput
  teamStandings?: TeamStandingUpdateManyWithoutSeasonInput
}

export type SeasonUpsertWithoutRaceInput = {
  update: SeasonUpdateWithoutRaceInput
  create: SeasonCreateWithoutRaceInput
}

export type CircuitUpdateWithoutRaceInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  city?: XOR<string, StringFieldUpdateOperationsInput>
  country?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type CircuitUpsertWithoutRaceInput = {
  update: CircuitUpdateWithoutRaceInput
  create: CircuitCreateWithoutRaceInput
}

export type RaceResultUpdateWithWhereUniqueWithoutRaceInput = {
  where: RaceResultWhereUniqueInput
  data: RaceResultUpdateWithoutRaceInput
}

export type RaceResultUpdateManyWithWhereWithoutRaceInput = {
  where: RaceResultScalarWhereInput
  data: RaceResultUpdateManyMutationInput
}

export type RaceResultUpsertWithWhereUniqueWithoutRaceInput = {
  where: RaceResultWhereUniqueInput
  update: RaceResultUpdateWithoutRaceInput
  create: RaceResultCreateWithoutRaceInput
}

export type DriverCreateWithoutRaceResultInput = {
  id: string
  code?: XOR<string, null>
  givenName: string
  familyName: string
  permanentNumber?: XOR<number, null>
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutDriversInput
  DriverStanding?: DriverStandingCreateManyWithoutDriverInput
}

export type DriverCreateOrConnectWithoutRaceResultInput = {
  where: DriverWhereUniqueInput
  create: DriverCreateWithoutRaceResultInput
}

export type TeamCreateWithoutRaceResultInput = {
  id: string
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutTeamsInput
  TeamStanding?: TeamStandingCreateManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutRaceResultInput = {
  where: TeamWhereUniqueInput
  create: TeamCreateWithoutRaceResultInput
}

export type RaceCreateWithoutRaceResultInput = {
  round: number
  name: string
  date: Date | string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  season: SeasonCreateOneWithoutRaceInput
  circuit: CircuitCreateOneWithoutRaceInput
}

export type RaceCreateOrConnectWithoutRaceResultInput = {
  where: RaceWhereUniqueInput
  create: RaceCreateWithoutRaceResultInput
}

export type DriverUpdateWithoutRaceResultInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: string | NullableStringFieldUpdateOperationsInput | null
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: number | NullableIntFieldUpdateOperationsInput | null
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutDriversInput
  DriverStanding?: DriverStandingUpdateManyWithoutDriverInput
}

export type DriverUpsertWithoutRaceResultInput = {
  update: DriverUpdateWithoutRaceResultInput
  create: DriverCreateWithoutRaceResultInput
}

export type TeamUpdateWithoutRaceResultInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutTeamsInput
  TeamStanding?: TeamStandingUpdateManyWithoutTeamInput
}

export type TeamUpsertWithoutRaceResultInput = {
  update: TeamUpdateWithoutRaceResultInput
  create: TeamCreateWithoutRaceResultInput
}

export type RaceUpdateWithoutRaceResultInput = {
  round?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutRaceInput
  circuit?: CircuitUpdateOneRequiredWithoutRaceInput
}

export type RaceUpsertWithoutRaceResultInput = {
  update: RaceUpdateWithoutRaceResultInput
  create: RaceCreateWithoutRaceResultInput
}

export type SeasonCreateWithoutDriverStandingsInput = {
  year: number
  drivers?: DriverCreateManyWithoutSeasonsInput
  teams?: TeamCreateManyWithoutSeasonsInput
  teamStandings?: TeamStandingCreateManyWithoutSeasonInput
  Race?: RaceCreateManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutdriverStandingsInput = {
  where: SeasonWhereUniqueInput
  create: SeasonCreateWithoutDriverStandingsInput
}

export type DriverCreateWithoutDriverStandingInput = {
  id: string
  code?: XOR<string, null>
  givenName: string
  familyName: string
  permanentNumber?: XOR<number, null>
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutDriversInput
  RaceResult?: RaceResultCreateManyWithoutDriverInput
}

export type DriverCreateOrConnectWithoutDriverStandingInput = {
  where: DriverWhereUniqueInput
  create: DriverCreateWithoutDriverStandingInput
}

export type SeasonUpdateWithoutDriverStandingsInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  drivers?: DriverUpdateManyWithoutSeasonsInput
  teams?: TeamUpdateManyWithoutSeasonsInput
  teamStandings?: TeamStandingUpdateManyWithoutSeasonInput
  Race?: RaceUpdateManyWithoutSeasonInput
}

export type SeasonUpsertWithoutDriverStandingsInput = {
  update: SeasonUpdateWithoutDriverStandingsInput
  create: SeasonCreateWithoutDriverStandingsInput
}

export type DriverUpdateWithoutDriverStandingInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: string | NullableStringFieldUpdateOperationsInput | null
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: number | NullableIntFieldUpdateOperationsInput | null
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutDriversInput
  RaceResult?: RaceResultUpdateManyWithoutDriverInput
}

export type DriverUpsertWithoutDriverStandingInput = {
  update: DriverUpdateWithoutDriverStandingInput
  create: DriverCreateWithoutDriverStandingInput
}

export type SeasonCreateWithoutTeamStandingsInput = {
  year: number
  drivers?: DriverCreateManyWithoutSeasonsInput
  teams?: TeamCreateManyWithoutSeasonsInput
  driverStandings?: DriverStandingCreateManyWithoutSeasonInput
  Race?: RaceCreateManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutteamStandingsInput = {
  where: SeasonWhereUniqueInput
  create: SeasonCreateWithoutTeamStandingsInput
}

export type TeamCreateWithoutTeamStandingInput = {
  id: string
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  seasons?: SeasonCreateManyWithoutTeamsInput
  RaceResult?: RaceResultCreateManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutTeamStandingInput = {
  where: TeamWhereUniqueInput
  create: TeamCreateWithoutTeamStandingInput
}

export type SeasonUpdateWithoutTeamStandingsInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  drivers?: DriverUpdateManyWithoutSeasonsInput
  teams?: TeamUpdateManyWithoutSeasonsInput
  driverStandings?: DriverStandingUpdateManyWithoutSeasonInput
  Race?: RaceUpdateManyWithoutSeasonInput
}

export type SeasonUpsertWithoutTeamStandingsInput = {
  update: SeasonUpdateWithoutTeamStandingsInput
  create: SeasonCreateWithoutTeamStandingsInput
}

export type TeamUpdateWithoutTeamStandingInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  seasons?: SeasonUpdateManyWithoutTeamsInput
  RaceResult?: RaceResultUpdateManyWithoutTeamInput
}

export type TeamUpsertWithoutTeamStandingInput = {
  update: TeamUpdateWithoutTeamStandingInput
  create: TeamCreateWithoutTeamStandingInput
}

export type DriverCreateWithoutSeasonsInput = {
  id: string
  code?: XOR<string, null>
  givenName: string
  familyName: string
  permanentNumber?: XOR<number, null>
  dateOfBirth: Date | string
  url: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  DriverStanding?: DriverStandingCreateManyWithoutDriverInput
  RaceResult?: RaceResultCreateManyWithoutDriverInput
}

export type DriverCreateOrConnectWithoutseasonsInput = {
  where: DriverWhereUniqueInput
  create: DriverCreateWithoutSeasonsInput
}

export type TeamCreateWithoutSeasonsInput = {
  id: string
  name: string
  nationality: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  TeamStanding?: TeamStandingCreateManyWithoutTeamInput
  RaceResult?: RaceResultCreateManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutseasonsInput = {
  where: TeamWhereUniqueInput
  create: TeamCreateWithoutSeasonsInput
}

export type DriverStandingCreateWithoutSeasonInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  driver: DriverCreateOneWithoutDriverStandingInput
}

export type DriverStandingCreateOrConnectWithoutseasonInput = {
  where: DriverStandingWhereUniqueInput
  create: DriverStandingCreateWithoutSeasonInput
}

export type TeamStandingCreateWithoutSeasonInput = {
  position: number
  points: number
  wins: number
  createdAt?: Date | string
  updatedAt?: Date | string
  team: TeamCreateOneWithoutTeamStandingInput
}

export type TeamStandingCreateOrConnectWithoutseasonInput = {
  where: TeamStandingWhereUniqueInput
  create: TeamStandingCreateWithoutSeasonInput
}

export type RaceCreateWithoutSeasonInput = {
  round: number
  name: string
  date: Date | string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  circuit: CircuitCreateOneWithoutRaceInput
  RaceResult?: RaceResultCreateManyWithoutRaceInput
}

export type RaceCreateOrConnectWithoutseasonInput = {
  where: RaceWhereUniqueInput
  create: RaceCreateWithoutSeasonInput
}

export type DriverUpdateWithWhereUniqueWithoutSeasonsInput = {
  where: DriverWhereUniqueInput
  data: DriverUpdateWithoutSeasonsInput
}

export type DriverUpdateManyWithWhereWithoutSeasonsInput = {
  where: DriverScalarWhereInput
  data: DriverUpdateManyMutationInput
}

export type DriverScalarWhereInput = {
  AND?: XOR<DriverScalarWhereInput, Enumerable<DriverScalarWhereInput>>
  OR?: XOR<DriverScalarWhereInput, Enumerable<DriverScalarWhereInput>>
  NOT?: XOR<DriverScalarWhereInput, Enumerable<DriverScalarWhereInput>>
  id?: XOR<StringFilter, string>
  code?: StringNullableFilter | string | null
  givenName?: XOR<StringFilter, string>
  familyName?: XOR<StringFilter, string>
  permanentNumber?: IntNullableFilter | number | null
  dateOfBirth?: XOR<DateTimeFilter, Date | string>
  url?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DriverUpsertWithWhereUniqueWithoutSeasonsInput = {
  where: DriverWhereUniqueInput
  update: DriverUpdateWithoutSeasonsInput
  create: DriverCreateWithoutSeasonsInput
}

export type TeamUpdateWithWhereUniqueWithoutSeasonsInput = {
  where: TeamWhereUniqueInput
  data: TeamUpdateWithoutSeasonsInput
}

export type TeamUpdateManyWithWhereWithoutSeasonsInput = {
  where: TeamScalarWhereInput
  data: TeamUpdateManyMutationInput
}

export type TeamScalarWhereInput = {
  AND?: XOR<TeamScalarWhereInput, Enumerable<TeamScalarWhereInput>>
  OR?: XOR<TeamScalarWhereInput, Enumerable<TeamScalarWhereInput>>
  NOT?: XOR<TeamScalarWhereInput, Enumerable<TeamScalarWhereInput>>
  id?: XOR<StringFilter, string>
  name?: XOR<StringFilter, string>
  nationality?: XOR<StringFilter, string>
  url?: XOR<StringFilter, string>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type TeamUpsertWithWhereUniqueWithoutSeasonsInput = {
  where: TeamWhereUniqueInput
  update: TeamUpdateWithoutSeasonsInput
  create: TeamCreateWithoutSeasonsInput
}

export type DriverStandingUpdateWithWhereUniqueWithoutSeasonInput = {
  where: DriverStandingWhereUniqueInput
  data: DriverStandingUpdateWithoutSeasonInput
}

export type DriverStandingUpdateManyWithWhereWithoutSeasonInput = {
  where: DriverStandingScalarWhereInput
  data: DriverStandingUpdateManyMutationInput
}

export type DriverStandingUpsertWithWhereUniqueWithoutSeasonInput = {
  where: DriverStandingWhereUniqueInput
  update: DriverStandingUpdateWithoutSeasonInput
  create: DriverStandingCreateWithoutSeasonInput
}

export type TeamStandingUpdateWithWhereUniqueWithoutSeasonInput = {
  where: TeamStandingWhereUniqueInput
  data: TeamStandingUpdateWithoutSeasonInput
}

export type TeamStandingUpdateManyWithWhereWithoutSeasonInput = {
  where: TeamStandingScalarWhereInput
  data: TeamStandingUpdateManyMutationInput
}

export type TeamStandingUpsertWithWhereUniqueWithoutSeasonInput = {
  where: TeamStandingWhereUniqueInput
  update: TeamStandingUpdateWithoutSeasonInput
  create: TeamStandingCreateWithoutSeasonInput
}

export type RaceUpdateWithWhereUniqueWithoutSeasonInput = {
  where: RaceWhereUniqueInput
  data: RaceUpdateWithoutSeasonInput
}

export type RaceUpdateManyWithWhereWithoutSeasonInput = {
  where: RaceScalarWhereInput
  data: RaceUpdateManyMutationInput
}

export type RaceUpsertWithWhereUniqueWithoutSeasonInput = {
  where: RaceWhereUniqueInput
  update: RaceUpdateWithoutSeasonInput
  create: RaceCreateWithoutSeasonInput
}

export type SeasonUpdateWithoutDriversInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  teams?: TeamUpdateManyWithoutSeasonsInput
  driverStandings?: DriverStandingUpdateManyWithoutSeasonInput
  teamStandings?: TeamStandingUpdateManyWithoutSeasonInput
  Race?: RaceUpdateManyWithoutSeasonInput
}

export type DriverStandingUpdateWithoutDriverInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutDriverStandingsInput
}

export type RaceResultUpdateWithoutDriverInput = {
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  position?: XOR<number, IntFieldUpdateOperationsInput>
  grid?: XOR<number, IntFieldUpdateOperationsInput>
  laps?: XOR<number, IntFieldUpdateOperationsInput>
  time?: string | NullableStringFieldUpdateOperationsInput | null
  status?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  team?: TeamUpdateOneRequiredWithoutRaceResultInput
  race?: RaceUpdateOneRequiredWithoutRaceResultInput
}

export type SeasonUpdateWithoutTeamsInput = {
  year?: XOR<number, IntFieldUpdateOperationsInput>
  drivers?: DriverUpdateManyWithoutSeasonsInput
  driverStandings?: DriverStandingUpdateManyWithoutSeasonInput
  teamStandings?: TeamStandingUpdateManyWithoutSeasonInput
  Race?: RaceUpdateManyWithoutSeasonInput
}

export type TeamStandingUpdateWithoutTeamInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutTeamStandingsInput
}

export type RaceResultUpdateWithoutTeamInput = {
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  position?: XOR<number, IntFieldUpdateOperationsInput>
  grid?: XOR<number, IntFieldUpdateOperationsInput>
  laps?: XOR<number, IntFieldUpdateOperationsInput>
  time?: string | NullableStringFieldUpdateOperationsInput | null
  status?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  driver?: DriverUpdateOneRequiredWithoutRaceResultInput
  race?: RaceUpdateOneRequiredWithoutRaceResultInput
}

export type RaceUpdateWithoutCircuitInput = {
  round?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  season?: SeasonUpdateOneRequiredWithoutRaceInput
  RaceResult?: RaceResultUpdateManyWithoutRaceInput
}

export type RaceResultUpdateWithoutRaceInput = {
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  position?: XOR<number, IntFieldUpdateOperationsInput>
  grid?: XOR<number, IntFieldUpdateOperationsInput>
  laps?: XOR<number, IntFieldUpdateOperationsInput>
  time?: string | NullableStringFieldUpdateOperationsInput | null
  status?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  driver?: DriverUpdateOneRequiredWithoutRaceResultInput
  team?: TeamUpdateOneRequiredWithoutRaceResultInput
}

export type DriverUpdateWithoutSeasonsInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  code?: string | NullableStringFieldUpdateOperationsInput | null
  givenName?: XOR<string, StringFieldUpdateOperationsInput>
  familyName?: XOR<string, StringFieldUpdateOperationsInput>
  permanentNumber?: number | NullableIntFieldUpdateOperationsInput | null
  dateOfBirth?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  DriverStanding?: DriverStandingUpdateManyWithoutDriverInput
  RaceResult?: RaceResultUpdateManyWithoutDriverInput
}

export type TeamUpdateWithoutSeasonsInput = {
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  nationality?: XOR<string, StringFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  TeamStanding?: TeamStandingUpdateManyWithoutTeamInput
  RaceResult?: RaceResultUpdateManyWithoutTeamInput
}

export type DriverStandingUpdateWithoutSeasonInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  driver?: DriverUpdateOneRequiredWithoutDriverStandingInput
}

export type TeamStandingUpdateWithoutSeasonInput = {
  position?: XOR<number, IntFieldUpdateOperationsInput>
  points?: XOR<number, FloatFieldUpdateOperationsInput>
  wins?: XOR<number, IntFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  team?: TeamUpdateOneRequiredWithoutTeamStandingInput
}

export type RaceUpdateWithoutSeasonInput = {
  round?: XOR<number, IntFieldUpdateOperationsInput>
  name?: XOR<string, StringFieldUpdateOperationsInput>
  date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  url?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  circuit?: CircuitUpdateOneRequiredWithoutRaceInput
  RaceResult?: RaceResultUpdateManyWithoutRaceInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
